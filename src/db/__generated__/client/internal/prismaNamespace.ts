
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion: PrismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Member: 'Member',
  Invitation: 'Invitation',
  Organization: 'Organization',
  OpeningTimes: 'OpeningTimes',
  ClosingTimes: 'ClosingTimes',
  OrganizationConfiguration: 'OrganizationConfiguration',
  Address: 'Address',
  LegalEntity: 'LegalEntity',
  File: 'File',
  Manufacturer: 'Manufacturer',
  ManufacturerTranslation: 'ManufacturerTranslation',
  ProductCategory: 'ProductCategory',
  ProductCategoryTranslation: 'ProductCategoryTranslation',
  Product: 'Product',
  ProductSnapshot: 'ProductSnapshot',
  ProductTranslation: 'ProductTranslation',
  ModifierGroup: 'ModifierGroup',
  ModifierGroupTranslation: 'ModifierGroupTranslation',
  Modifier: 'Modifier',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderItemTranslation: 'OrderItemTranslation',
  Payment: 'Payment',
  PaymentSession: 'PaymentSession',
  Campaign: 'Campaign',
  ShippingMethod: 'ShippingMethod',
  ShippingZone: 'ShippingZone',
  Reservation: 'Reservation'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "session" | "account" | "verification" | "member" | "invitation" | "organization" | "openingTimes" | "closingTimes" | "organizationConfiguration" | "address" | "legalEntity" | "file" | "manufacturer" | "manufacturerTranslation" | "productCategory" | "productCategoryTranslation" | "product" | "productSnapshot" | "productTranslation" | "modifierGroup" | "modifierGroupTranslation" | "modifier" | "order" | "orderItem" | "orderItemTranslation" | "payment" | "paymentSession" | "campaign" | "shippingMethod" | "shippingZone" | "reservation"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>
      fields: Prisma.SessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>
        }
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number
        }
      }
    }
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>
      fields: Prisma.AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    Verification: {
      payload: Prisma.$VerificationPayload<ExtArgs>
      fields: Prisma.VerificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VerificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findFirst: {
          args: Prisma.VerificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        findMany: {
          args: Prisma.VerificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        create: {
          args: Prisma.VerificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        createMany: {
          args: Prisma.VerificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        delete: {
          args: Prisma.VerificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        update: {
          args: Prisma.VerificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        deleteMany: {
          args: Prisma.VerificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VerificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>[]
        }
        upsert: {
          args: Prisma.VerificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VerificationPayload>
        }
        aggregate: {
          args: Prisma.VerificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVerification>
        }
        groupBy: {
          args: Prisma.VerificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.VerificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VerificationCountAggregateOutputType> | number
        }
      }
    }
    Member: {
      payload: Prisma.$MemberPayload<ExtArgs>
      fields: Prisma.MemberFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MemberFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        findFirst: {
          args: Prisma.MemberFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        findMany: {
          args: Prisma.MemberFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[]
        }
        create: {
          args: Prisma.MemberCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        createMany: {
          args: Prisma.MemberCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[]
        }
        delete: {
          args: Prisma.MemberDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        update: {
          args: Prisma.MemberUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        deleteMany: {
          args: Prisma.MemberDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MemberUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[]
        }
        upsert: {
          args: Prisma.MemberUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>
        }
        aggregate: {
          args: Prisma.MemberAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMember>
        }
        groupBy: {
          args: Prisma.MemberGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemberGroupByOutputType>[]
        }
        count: {
          args: Prisma.MemberCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MemberCountAggregateOutputType> | number
        }
      }
    }
    Invitation: {
      payload: Prisma.$InvitationPayload<ExtArgs>
      fields: Prisma.InvitationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InvitationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        findFirst: {
          args: Prisma.InvitationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        findMany: {
          args: Prisma.InvitationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[]
        }
        create: {
          args: Prisma.InvitationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        createMany: {
          args: Prisma.InvitationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[]
        }
        delete: {
          args: Prisma.InvitationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        update: {
          args: Prisma.InvitationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        deleteMany: {
          args: Prisma.InvitationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InvitationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>[]
        }
        upsert: {
          args: Prisma.InvitationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitationPayload>
        }
        aggregate: {
          args: Prisma.InvitationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvitation>
        }
        groupBy: {
          args: Prisma.InvitationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvitationGroupByOutputType>[]
        }
        count: {
          args: Prisma.InvitationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvitationCountAggregateOutputType> | number
        }
      }
    }
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType> | number
        }
      }
    }
    OpeningTimes: {
      payload: Prisma.$OpeningTimesPayload<ExtArgs>
      fields: Prisma.OpeningTimesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OpeningTimesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OpeningTimesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        findFirst: {
          args: Prisma.OpeningTimesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OpeningTimesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        findMany: {
          args: Prisma.OpeningTimesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>[]
        }
        create: {
          args: Prisma.OpeningTimesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        createMany: {
          args: Prisma.OpeningTimesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OpeningTimesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>[]
        }
        delete: {
          args: Prisma.OpeningTimesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        update: {
          args: Prisma.OpeningTimesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        deleteMany: {
          args: Prisma.OpeningTimesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OpeningTimesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OpeningTimesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>[]
        }
        upsert: {
          args: Prisma.OpeningTimesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OpeningTimesPayload>
        }
        aggregate: {
          args: Prisma.OpeningTimesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOpeningTimes>
        }
        groupBy: {
          args: Prisma.OpeningTimesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OpeningTimesGroupByOutputType>[]
        }
        count: {
          args: Prisma.OpeningTimesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OpeningTimesCountAggregateOutputType> | number
        }
      }
    }
    ClosingTimes: {
      payload: Prisma.$ClosingTimesPayload<ExtArgs>
      fields: Prisma.ClosingTimesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClosingTimesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClosingTimesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        findFirst: {
          args: Prisma.ClosingTimesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClosingTimesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        findMany: {
          args: Prisma.ClosingTimesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>[]
        }
        create: {
          args: Prisma.ClosingTimesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        createMany: {
          args: Prisma.ClosingTimesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClosingTimesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>[]
        }
        delete: {
          args: Prisma.ClosingTimesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        update: {
          args: Prisma.ClosingTimesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        deleteMany: {
          args: Prisma.ClosingTimesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClosingTimesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClosingTimesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>[]
        }
        upsert: {
          args: Prisma.ClosingTimesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClosingTimesPayload>
        }
        aggregate: {
          args: Prisma.ClosingTimesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClosingTimes>
        }
        groupBy: {
          args: Prisma.ClosingTimesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClosingTimesGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClosingTimesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClosingTimesCountAggregateOutputType> | number
        }
      }
    }
    OrganizationConfiguration: {
      payload: Prisma.$OrganizationConfigurationPayload<ExtArgs>
      fields: Prisma.OrganizationConfigurationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationConfigurationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationConfigurationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationConfigurationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationConfigurationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        findMany: {
          args: Prisma.OrganizationConfigurationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>[]
        }
        create: {
          args: Prisma.OrganizationConfigurationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        createMany: {
          args: Prisma.OrganizationConfigurationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationConfigurationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationConfigurationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        update: {
          args: Prisma.OrganizationConfigurationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationConfigurationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationConfigurationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationConfigurationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationConfigurationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationConfigurationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationConfigurationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationConfiguration>
        }
        groupBy: {
          args: Prisma.OrganizationConfigurationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationConfigurationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationConfigurationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationConfigurationCountAggregateOutputType> | number
        }
      }
    }
    Address: {
      payload: Prisma.$AddressPayload<ExtArgs>
      fields: Prisma.AddressFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddressFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findFirst: {
          args: Prisma.AddressFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findMany: {
          args: Prisma.AddressFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        create: {
          args: Prisma.AddressCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        createMany: {
          args: Prisma.AddressCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        delete: {
          args: Prisma.AddressDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        update: {
          args: Prisma.AddressUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        deleteMany: {
          args: Prisma.AddressDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddressUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        upsert: {
          args: Prisma.AddressUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        aggregate: {
          args: Prisma.AddressAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddress>
        }
        groupBy: {
          args: Prisma.AddressGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddressCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressCountAggregateOutputType> | number
        }
      }
    }
    LegalEntity: {
      payload: Prisma.$LegalEntityPayload<ExtArgs>
      fields: Prisma.LegalEntityFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LegalEntityFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LegalEntityFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        findFirst: {
          args: Prisma.LegalEntityFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LegalEntityFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        findMany: {
          args: Prisma.LegalEntityFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>[]
        }
        create: {
          args: Prisma.LegalEntityCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        createMany: {
          args: Prisma.LegalEntityCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LegalEntityCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>[]
        }
        delete: {
          args: Prisma.LegalEntityDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        update: {
          args: Prisma.LegalEntityUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        deleteMany: {
          args: Prisma.LegalEntityDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LegalEntityUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LegalEntityUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>[]
        }
        upsert: {
          args: Prisma.LegalEntityUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LegalEntityPayload>
        }
        aggregate: {
          args: Prisma.LegalEntityAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLegalEntity>
        }
        groupBy: {
          args: Prisma.LegalEntityGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LegalEntityGroupByOutputType>[]
        }
        count: {
          args: Prisma.LegalEntityCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LegalEntityCountAggregateOutputType> | number
        }
      }
    }
    File: {
      payload: Prisma.$FilePayload<ExtArgs>
      fields: Prisma.FileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findFirst: {
          args: Prisma.FileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findMany: {
          args: Prisma.FileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        create: {
          args: Prisma.FileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        createMany: {
          args: Prisma.FileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        delete: {
          args: Prisma.FileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        update: {
          args: Prisma.FileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        deleteMany: {
          args: Prisma.FileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        upsert: {
          args: Prisma.FileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        aggregate: {
          args: Prisma.FileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFile>
        }
        groupBy: {
          args: Prisma.FileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileCountAggregateOutputType> | number
        }
      }
    }
    Manufacturer: {
      payload: Prisma.$ManufacturerPayload<ExtArgs>
      fields: Prisma.ManufacturerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ManufacturerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ManufacturerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        findFirst: {
          args: Prisma.ManufacturerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ManufacturerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        findMany: {
          args: Prisma.ManufacturerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>[]
        }
        create: {
          args: Prisma.ManufacturerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        createMany: {
          args: Prisma.ManufacturerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ManufacturerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>[]
        }
        delete: {
          args: Prisma.ManufacturerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        update: {
          args: Prisma.ManufacturerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        deleteMany: {
          args: Prisma.ManufacturerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ManufacturerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ManufacturerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>[]
        }
        upsert: {
          args: Prisma.ManufacturerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerPayload>
        }
        aggregate: {
          args: Prisma.ManufacturerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateManufacturer>
        }
        groupBy: {
          args: Prisma.ManufacturerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManufacturerGroupByOutputType>[]
        }
        count: {
          args: Prisma.ManufacturerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManufacturerCountAggregateOutputType> | number
        }
      }
    }
    ManufacturerTranslation: {
      payload: Prisma.$ManufacturerTranslationPayload<ExtArgs>
      fields: Prisma.ManufacturerTranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ManufacturerTranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ManufacturerTranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        findFirst: {
          args: Prisma.ManufacturerTranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ManufacturerTranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        findMany: {
          args: Prisma.ManufacturerTranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>[]
        }
        create: {
          args: Prisma.ManufacturerTranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        createMany: {
          args: Prisma.ManufacturerTranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ManufacturerTranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>[]
        }
        delete: {
          args: Prisma.ManufacturerTranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        update: {
          args: Prisma.ManufacturerTranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        deleteMany: {
          args: Prisma.ManufacturerTranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ManufacturerTranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ManufacturerTranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>[]
        }
        upsert: {
          args: Prisma.ManufacturerTranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ManufacturerTranslationPayload>
        }
        aggregate: {
          args: Prisma.ManufacturerTranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateManufacturerTranslation>
        }
        groupBy: {
          args: Prisma.ManufacturerTranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManufacturerTranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ManufacturerTranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ManufacturerTranslationCountAggregateOutputType> | number
        }
      }
    }
    ProductCategory: {
      payload: Prisma.$ProductCategoryPayload<ExtArgs>
      fields: Prisma.ProductCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        findFirst: {
          args: Prisma.ProductCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        findMany: {
          args: Prisma.ProductCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
        }
        create: {
          args: Prisma.ProductCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        createMany: {
          args: Prisma.ProductCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
        }
        delete: {
          args: Prisma.ProductCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        update: {
          args: Prisma.ProductCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        deleteMany: {
          args: Prisma.ProductCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
        }
        upsert: {
          args: Prisma.ProductCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
        }
        aggregate: {
          args: Prisma.ProductCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductCategory>
        }
        groupBy: {
          args: Prisma.ProductCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCategoryCountAggregateOutputType> | number
        }
      }
    }
    ProductCategoryTranslation: {
      payload: Prisma.$ProductCategoryTranslationPayload<ExtArgs>
      fields: Prisma.ProductCategoryTranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductCategoryTranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductCategoryTranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        findFirst: {
          args: Prisma.ProductCategoryTranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductCategoryTranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        findMany: {
          args: Prisma.ProductCategoryTranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>[]
        }
        create: {
          args: Prisma.ProductCategoryTranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        createMany: {
          args: Prisma.ProductCategoryTranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductCategoryTranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>[]
        }
        delete: {
          args: Prisma.ProductCategoryTranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        update: {
          args: Prisma.ProductCategoryTranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        deleteMany: {
          args: Prisma.ProductCategoryTranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductCategoryTranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductCategoryTranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>[]
        }
        upsert: {
          args: Prisma.ProductCategoryTranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductCategoryTranslationPayload>
        }
        aggregate: {
          args: Prisma.ProductCategoryTranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductCategoryTranslation>
        }
        groupBy: {
          args: Prisma.ProductCategoryTranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCategoryTranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductCategoryTranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCategoryTranslationCountAggregateOutputType> | number
        }
      }
    }
    Product: {
      payload: Prisma.$ProductPayload<ExtArgs>
      fields: Prisma.ProductFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        findFirst: {
          args: Prisma.ProductFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        findMany: {
          args: Prisma.ProductFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        create: {
          args: Prisma.ProductCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        createMany: {
          args: Prisma.ProductCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        delete: {
          args: Prisma.ProductDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        update: {
          args: Prisma.ProductUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        deleteMany: {
          args: Prisma.ProductDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>[]
        }
        upsert: {
          args: Prisma.ProductUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductPayload>
        }
        aggregate: {
          args: Prisma.ProductAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProduct>
        }
        groupBy: {
          args: Prisma.ProductGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductCountAggregateOutputType> | number
        }
      }
    }
    ProductSnapshot: {
      payload: Prisma.$ProductSnapshotPayload<ExtArgs>
      fields: Prisma.ProductSnapshotFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductSnapshotFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductSnapshotFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        findFirst: {
          args: Prisma.ProductSnapshotFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductSnapshotFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        findMany: {
          args: Prisma.ProductSnapshotFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>[]
        }
        create: {
          args: Prisma.ProductSnapshotCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        createMany: {
          args: Prisma.ProductSnapshotCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductSnapshotCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>[]
        }
        delete: {
          args: Prisma.ProductSnapshotDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        update: {
          args: Prisma.ProductSnapshotUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        deleteMany: {
          args: Prisma.ProductSnapshotDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductSnapshotUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductSnapshotUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>[]
        }
        upsert: {
          args: Prisma.ProductSnapshotUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductSnapshotPayload>
        }
        aggregate: {
          args: Prisma.ProductSnapshotAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductSnapshot>
        }
        groupBy: {
          args: Prisma.ProductSnapshotGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductSnapshotGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductSnapshotCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductSnapshotCountAggregateOutputType> | number
        }
      }
    }
    ProductTranslation: {
      payload: Prisma.$ProductTranslationPayload<ExtArgs>
      fields: Prisma.ProductTranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductTranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductTranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        findFirst: {
          args: Prisma.ProductTranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductTranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        findMany: {
          args: Prisma.ProductTranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
        }
        create: {
          args: Prisma.ProductTranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        createMany: {
          args: Prisma.ProductTranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductTranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
        }
        delete: {
          args: Prisma.ProductTranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        update: {
          args: Prisma.ProductTranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        deleteMany: {
          args: Prisma.ProductTranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductTranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductTranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
        }
        upsert: {
          args: Prisma.ProductTranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
        }
        aggregate: {
          args: Prisma.ProductTranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductTranslation>
        }
        groupBy: {
          args: Prisma.ProductTranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductTranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductTranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductTranslationCountAggregateOutputType> | number
        }
      }
    }
    ModifierGroup: {
      payload: Prisma.$ModifierGroupPayload<ExtArgs>
      fields: Prisma.ModifierGroupFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ModifierGroupFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ModifierGroupFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        findFirst: {
          args: Prisma.ModifierGroupFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ModifierGroupFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        findMany: {
          args: Prisma.ModifierGroupFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>[]
        }
        create: {
          args: Prisma.ModifierGroupCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        createMany: {
          args: Prisma.ModifierGroupCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ModifierGroupCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>[]
        }
        delete: {
          args: Prisma.ModifierGroupDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        update: {
          args: Prisma.ModifierGroupUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        deleteMany: {
          args: Prisma.ModifierGroupDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ModifierGroupUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ModifierGroupUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>[]
        }
        upsert: {
          args: Prisma.ModifierGroupUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupPayload>
        }
        aggregate: {
          args: Prisma.ModifierGroupAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateModifierGroup>
        }
        groupBy: {
          args: Prisma.ModifierGroupGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierGroupGroupByOutputType>[]
        }
        count: {
          args: Prisma.ModifierGroupCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierGroupCountAggregateOutputType> | number
        }
      }
    }
    ModifierGroupTranslation: {
      payload: Prisma.$ModifierGroupTranslationPayload<ExtArgs>
      fields: Prisma.ModifierGroupTranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ModifierGroupTranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ModifierGroupTranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        findFirst: {
          args: Prisma.ModifierGroupTranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ModifierGroupTranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        findMany: {
          args: Prisma.ModifierGroupTranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>[]
        }
        create: {
          args: Prisma.ModifierGroupTranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        createMany: {
          args: Prisma.ModifierGroupTranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ModifierGroupTranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>[]
        }
        delete: {
          args: Prisma.ModifierGroupTranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        update: {
          args: Prisma.ModifierGroupTranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        deleteMany: {
          args: Prisma.ModifierGroupTranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ModifierGroupTranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ModifierGroupTranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>[]
        }
        upsert: {
          args: Prisma.ModifierGroupTranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierGroupTranslationPayload>
        }
        aggregate: {
          args: Prisma.ModifierGroupTranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateModifierGroupTranslation>
        }
        groupBy: {
          args: Prisma.ModifierGroupTranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierGroupTranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ModifierGroupTranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierGroupTranslationCountAggregateOutputType> | number
        }
      }
    }
    Modifier: {
      payload: Prisma.$ModifierPayload<ExtArgs>
      fields: Prisma.ModifierFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ModifierFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ModifierFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        findFirst: {
          args: Prisma.ModifierFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ModifierFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        findMany: {
          args: Prisma.ModifierFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>[]
        }
        create: {
          args: Prisma.ModifierCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        createMany: {
          args: Prisma.ModifierCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ModifierCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>[]
        }
        delete: {
          args: Prisma.ModifierDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        update: {
          args: Prisma.ModifierUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        deleteMany: {
          args: Prisma.ModifierDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ModifierUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ModifierUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>[]
        }
        upsert: {
          args: Prisma.ModifierUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModifierPayload>
        }
        aggregate: {
          args: Prisma.ModifierAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateModifier>
        }
        groupBy: {
          args: Prisma.ModifierGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierGroupByOutputType>[]
        }
        count: {
          args: Prisma.ModifierCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModifierCountAggregateOutputType> | number
        }
      }
    }
    Order: {
      payload: Prisma.$OrderPayload<ExtArgs>
      fields: Prisma.OrderFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrderFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        findFirst: {
          args: Prisma.OrderFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        findMany: {
          args: Prisma.OrderFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        create: {
          args: Prisma.OrderCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        createMany: {
          args: Prisma.OrderCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        delete: {
          args: Prisma.OrderDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        update: {
          args: Prisma.OrderUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        deleteMany: {
          args: Prisma.OrderDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrderUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>[]
        }
        upsert: {
          args: Prisma.OrderUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderPayload>
        }
        aggregate: {
          args: Prisma.OrderAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder>
        }
        groupBy: {
          args: Prisma.OrderGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrderCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderCountAggregateOutputType> | number
        }
      }
    }
    OrderItem: {
      payload: Prisma.$OrderItemPayload<ExtArgs>
      fields: Prisma.OrderItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        findFirst: {
          args: Prisma.OrderItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        findMany: {
          args: Prisma.OrderItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
        }
        create: {
          args: Prisma.OrderItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        createMany: {
          args: Prisma.OrderItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
        }
        delete: {
          args: Prisma.OrderItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        update: {
          args: Prisma.OrderItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        deleteMany: {
          args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
        }
        upsert: {
          args: Prisma.OrderItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemPayload>
        }
        aggregate: {
          args: Prisma.OrderItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrderItem>
        }
        groupBy: {
          args: Prisma.OrderItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrderItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderItemCountAggregateOutputType> | number
        }
      }
    }
    OrderItemTranslation: {
      payload: Prisma.$OrderItemTranslationPayload<ExtArgs>
      fields: Prisma.OrderItemTranslationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrderItemTranslationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrderItemTranslationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        findFirst: {
          args: Prisma.OrderItemTranslationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrderItemTranslationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        findMany: {
          args: Prisma.OrderItemTranslationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>[]
        }
        create: {
          args: Prisma.OrderItemTranslationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        createMany: {
          args: Prisma.OrderItemTranslationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrderItemTranslationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>[]
        }
        delete: {
          args: Prisma.OrderItemTranslationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        update: {
          args: Prisma.OrderItemTranslationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        deleteMany: {
          args: Prisma.OrderItemTranslationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrderItemTranslationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrderItemTranslationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>[]
        }
        upsert: {
          args: Prisma.OrderItemTranslationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrderItemTranslationPayload>
        }
        aggregate: {
          args: Prisma.OrderItemTranslationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrderItemTranslation>
        }
        groupBy: {
          args: Prisma.OrderItemTranslationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderItemTranslationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrderItemTranslationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrderItemTranslationCountAggregateOutputType> | number
        }
      }
    }
    Payment: {
      payload: Prisma.$PaymentPayload<ExtArgs>
      fields: Prisma.PaymentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        findFirst: {
          args: Prisma.PaymentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        findMany: {
          args: Prisma.PaymentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        create: {
          args: Prisma.PaymentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        createMany: {
          args: Prisma.PaymentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        delete: {
          args: Prisma.PaymentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        update: {
          args: Prisma.PaymentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        deleteMany: {
          args: Prisma.PaymentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>[]
        }
        upsert: {
          args: Prisma.PaymentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentPayload>
        }
        aggregate: {
          args: Prisma.PaymentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePayment>
        }
        groupBy: {
          args: Prisma.PaymentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentCountAggregateOutputType> | number
        }
      }
    }
    PaymentSession: {
      payload: Prisma.$PaymentSessionPayload<ExtArgs>
      fields: Prisma.PaymentSessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentSessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentSessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        findFirst: {
          args: Prisma.PaymentSessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentSessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        findMany: {
          args: Prisma.PaymentSessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>[]
        }
        create: {
          args: Prisma.PaymentSessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        createMany: {
          args: Prisma.PaymentSessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentSessionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>[]
        }
        delete: {
          args: Prisma.PaymentSessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        update: {
          args: Prisma.PaymentSessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        deleteMany: {
          args: Prisma.PaymentSessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentSessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentSessionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>[]
        }
        upsert: {
          args: Prisma.PaymentSessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentSessionPayload>
        }
        aggregate: {
          args: Prisma.PaymentSessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaymentSession>
        }
        groupBy: {
          args: Prisma.PaymentSessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentSessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentSessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentSessionCountAggregateOutputType> | number
        }
      }
    }
    Campaign: {
      payload: Prisma.$CampaignPayload<ExtArgs>
      fields: Prisma.CampaignFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CampaignFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        findFirst: {
          args: Prisma.CampaignFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        findMany: {
          args: Prisma.CampaignFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>[]
        }
        create: {
          args: Prisma.CampaignCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        createMany: {
          args: Prisma.CampaignCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>[]
        }
        delete: {
          args: Prisma.CampaignDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        update: {
          args: Prisma.CampaignUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        deleteMany: {
          args: Prisma.CampaignDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CampaignUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>[]
        }
        upsert: {
          args: Prisma.CampaignUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CampaignPayload>
        }
        aggregate: {
          args: Prisma.CampaignAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCampaign>
        }
        groupBy: {
          args: Prisma.CampaignGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CampaignGroupByOutputType>[]
        }
        count: {
          args: Prisma.CampaignCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CampaignCountAggregateOutputType> | number
        }
      }
    }
    ShippingMethod: {
      payload: Prisma.$ShippingMethodPayload<ExtArgs>
      fields: Prisma.ShippingMethodFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ShippingMethodFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ShippingMethodFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        findFirst: {
          args: Prisma.ShippingMethodFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ShippingMethodFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        findMany: {
          args: Prisma.ShippingMethodFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>[]
        }
        create: {
          args: Prisma.ShippingMethodCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        createMany: {
          args: Prisma.ShippingMethodCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ShippingMethodCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>[]
        }
        delete: {
          args: Prisma.ShippingMethodDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        update: {
          args: Prisma.ShippingMethodUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        deleteMany: {
          args: Prisma.ShippingMethodDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ShippingMethodUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ShippingMethodUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>[]
        }
        upsert: {
          args: Prisma.ShippingMethodUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingMethodPayload>
        }
        aggregate: {
          args: Prisma.ShippingMethodAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateShippingMethod>
        }
        groupBy: {
          args: Prisma.ShippingMethodGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShippingMethodGroupByOutputType>[]
        }
        count: {
          args: Prisma.ShippingMethodCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShippingMethodCountAggregateOutputType> | number
        }
      }
    }
    ShippingZone: {
      payload: Prisma.$ShippingZonePayload<ExtArgs>
      fields: Prisma.ShippingZoneFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ShippingZoneFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ShippingZoneFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        findFirst: {
          args: Prisma.ShippingZoneFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ShippingZoneFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        findMany: {
          args: Prisma.ShippingZoneFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>[]
        }
        create: {
          args: Prisma.ShippingZoneCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        createMany: {
          args: Prisma.ShippingZoneCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ShippingZoneCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>[]
        }
        delete: {
          args: Prisma.ShippingZoneDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        update: {
          args: Prisma.ShippingZoneUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        deleteMany: {
          args: Prisma.ShippingZoneDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ShippingZoneUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ShippingZoneUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>[]
        }
        upsert: {
          args: Prisma.ShippingZoneUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShippingZonePayload>
        }
        aggregate: {
          args: Prisma.ShippingZoneAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateShippingZone>
        }
        groupBy: {
          args: Prisma.ShippingZoneGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShippingZoneGroupByOutputType>[]
        }
        count: {
          args: Prisma.ShippingZoneCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ShippingZoneCountAggregateOutputType> | number
        }
      }
    }
    Reservation: {
      payload: Prisma.$ReservationPayload<ExtArgs>
      fields: Prisma.ReservationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReservationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        findFirst: {
          args: Prisma.ReservationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        findMany: {
          args: Prisma.ReservationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>[]
        }
        create: {
          args: Prisma.ReservationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        createMany: {
          args: Prisma.ReservationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReservationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>[]
        }
        delete: {
          args: Prisma.ReservationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        update: {
          args: Prisma.ReservationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        deleteMany: {
          args: Prisma.ReservationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReservationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReservationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>[]
        }
        upsert: {
          args: Prisma.ReservationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReservationPayload>
        }
        aggregate: {
          args: Prisma.ReservationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReservation>
        }
        groupBy: {
          args: Prisma.ReservationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReservationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReservationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReservationCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  activeOrganizationId: 'activeOrganizationId'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


export const MemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt'
} as const

export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


export const InvitationScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  role: 'role',
  status: 'status',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId'
} as const

export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


export const OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  phone: 'phone',
  email: 'email',
  legalEntityId: 'legalEntityId',
  addressId: 'addressId',
  configurationId: 'configurationId',
  logo: 'logo',
  logoId: 'logoId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
} as const

export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


export const OpeningTimesScalarFieldEnum = {
  id: 'id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday'
} as const

export type OpeningTimesScalarFieldEnum = (typeof OpeningTimesScalarFieldEnum)[keyof typeof OpeningTimesScalarFieldEnum]


export const ClosingTimesScalarFieldEnum = {
  id: 'id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday'
} as const

export type ClosingTimesScalarFieldEnum = (typeof ClosingTimesScalarFieldEnum)[keyof typeof ClosingTimesScalarFieldEnum]


export const OrganizationConfigurationScalarFieldEnum = {
  id: 'id',
  hostname: 'hostname',
  countriesShipping: 'countriesShipping',
  stripeAccountId: 'stripeAccountId',
  enableHostCheckout: 'enableHostCheckout',
  enableHostTracking: 'enableHostTracking',
  isAcceptingOrders: 'isAcceptingOrders',
  defaultCurrency: 'defaultCurrency',
  defaultLocale: 'defaultLocale',
  supportedLocales: 'supportedLocales',
  openingTimesId: 'openingTimesId',
  closingTimesId: 'closingTimesId',
  facebookProfile: 'facebookProfile',
  instagramProfile: 'instagramProfile',
  xProfile: 'xProfile',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
} as const

export type OrganizationConfigurationScalarFieldEnum = (typeof OrganizationConfigurationScalarFieldEnum)[keyof typeof OrganizationConfigurationScalarFieldEnum]


export const AddressScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  addressLineOne: 'addressLineOne',
  doorNumber: 'doorNumber',
  addressLineTwo: 'addressLineTwo',
  zipCode: 'zipCode',
  placeId: 'placeId',
  deliveryInstructions: 'deliveryInstructions',
  city: 'city',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
} as const

export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


export const LegalEntityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  taxId: 'taxId',
  addressId: 'addressId',
  email: 'email',
  phone: 'phone',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
} as const

export type LegalEntityScalarFieldEnum = (typeof LegalEntityScalarFieldEnum)[keyof typeof LegalEntityScalarFieldEnum]


export const FileScalarFieldEnum = {
  id: 'id',
  mimeType: 'mimeType',
  size: 'size',
  filename: 'filename',
  url: 'url',
  status: 'status',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
} as const

export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


export const ManufacturerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logoId: 'logoId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
} as const

export type ManufacturerScalarFieldEnum = (typeof ManufacturerScalarFieldEnum)[keyof typeof ManufacturerScalarFieldEnum]


export const ManufacturerTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  about: 'about',
  manufacturerId: 'manufacturerId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
} as const

export type ManufacturerTranslationScalarFieldEnum = (typeof ManufacturerTranslationScalarFieldEnum)[keyof typeof ManufacturerTranslationScalarFieldEnum]


export const ProductCategoryScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  organizationId: 'organizationId',
  priority: 'priority',
  imageId: 'imageId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy'
} as const

export type ProductCategoryScalarFieldEnum = (typeof ProductCategoryScalarFieldEnum)[keyof typeof ProductCategoryScalarFieldEnum]


export const ProductCategoryTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  productCategoryId: 'productCategoryId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
} as const

export type ProductCategoryTranslationScalarFieldEnum = (typeof ProductCategoryTranslationScalarFieldEnum)[keyof typeof ProductCategoryTranslationScalarFieldEnum]


export const ProductScalarFieldEnum = {
  id: 'id',
  content: 'content',
  slug: 'slug',
  sku: 'sku',
  basePrice: 'basePrice',
  discountedBasePrice: 'discountedBasePrice',
  currency: 'currency',
  organizationId: 'organizationId',
  manufacturerId: 'manufacturerId',
  tags: 'tags',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  latestSnapshotId: 'latestSnapshotId'
} as const

export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


export const ProductSnapshotScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
} as const

export type ProductSnapshotScalarFieldEnum = (typeof ProductSnapshotScalarFieldEnum)[keyof typeof ProductSnapshotScalarFieldEnum]


export const ProductTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  productId: 'productId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
} as const

export type ProductTranslationScalarFieldEnum = (typeof ProductTranslationScalarFieldEnum)[keyof typeof ProductTranslationScalarFieldEnum]


export const ModifierGroupScalarFieldEnum = {
  id: 'id',
  selectMin: 'selectMin',
  selectMax: 'selectMax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ModifierGroupScalarFieldEnum = (typeof ModifierGroupScalarFieldEnum)[keyof typeof ModifierGroupScalarFieldEnum]


export const ModifierGroupTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  modifierGroupId: 'modifierGroupId'
} as const

export type ModifierGroupTranslationScalarFieldEnum = (typeof ModifierGroupTranslationScalarFieldEnum)[keyof typeof ModifierGroupTranslationScalarFieldEnum]


export const ModifierScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  sku: 'sku',
  price: 'price',
  modifierGroupId: 'modifierGroupId'
} as const

export type ModifierScalarFieldEnum = (typeof ModifierScalarFieldEnum)[keyof typeof ModifierScalarFieldEnum]


export const OrderScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  paymentId: 'paymentId',
  token: 'token',
  expiresAt: 'expiresAt',
  referenceId: 'referenceId',
  fulfilmentMethod: 'fulfilmentMethod',
  shippingMethodId: 'shippingMethodId',
  shippingAddressId: 'shippingAddressId',
  dateOfExecution: 'dateOfExecution',
  currency: 'currency',
  sourceIp: 'sourceIp',
  acceptedAt: 'acceptedAt',
  readyForDispatchAt: 'readyForDispatchAt',
  dispatchedAt: 'dispatchedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


export const OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  orderId: 'orderId',
  rawData: 'rawData',
  productSnapshotId: 'productSnapshotId',
  imageId: 'imageId'
} as const

export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


export const OrderItemTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  subtitle: 'subtitle',
  orderItemId: 'orderItemId'
} as const

export type OrderItemTranslationScalarFieldEnum = (typeof OrderItemTranslationScalarFieldEnum)[keyof typeof OrderItemTranslationScalarFieldEnum]


export const PaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  provider: 'provider',
  shipping: 'shipping',
  subtotal: 'subtotal',
  total: 'total',
  discount: 'discount',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


export const PaymentSessionScalarFieldEnum = {
  id: 'id',
  referenceId: 'referenceId',
  amount: 'amount',
  currency: 'currency',
  rawData: 'rawData',
  capturedAt: 'capturedAt',
  expiredAt: 'expiredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentId: 'paymentId'
} as const

export type PaymentSessionScalarFieldEnum = (typeof PaymentSessionScalarFieldEnum)[keyof typeof PaymentSessionScalarFieldEnum]


export const CampaignScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  validFrom: 'validFrom',
  validTo: 'validTo',
  organizationId: 'organizationId',
  amount: 'amount',
  percentage: 'percentage',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


export const ShippingMethodScalarFieldEnum = {
  id: 'id',
  title: 'title',
  providerName: 'providerName',
  providerLogoId: 'providerLogoId',
  requireDateOfDelivery: 'requireDateOfDelivery',
  organizationId: 'organizationId',
  archivedAt: 'archivedAt',
  archivedBy: 'archivedBy',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
} as const

export type ShippingMethodScalarFieldEnum = (typeof ShippingMethodScalarFieldEnum)[keyof typeof ShippingMethodScalarFieldEnum]


export const ShippingZoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  distanceUpto: 'distanceUpto',
  price: 'price',
  minimumOrderAmount: 'minimumOrderAmount',
  shippingMethodId: 'shippingMethodId',
  eta: 'eta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ShippingZoneScalarFieldEnum = (typeof ShippingZoneScalarFieldEnum)[keyof typeof ShippingZoneScalarFieldEnum]


export const ReservationScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  userId: 'userId',
  guests: 'guests',
  phone: 'phone',
  date: 'date',
  referenceId: 'referenceId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  cancelledAt: 'cancelledAt',
  updatedAt: 'updatedAt'
} as const

export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Currency'
 */
export type EnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency'>
    


/**
 * Reference to a field of type 'Currency[]'
 */
export type ListEnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency[]'>
    


/**
 * Reference to a field of type 'Locale'
 */
export type EnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale'>
    


/**
 * Reference to a field of type 'Locale[]'
 */
export type ListEnumLocaleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Locale[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'FileUploadStatus'
 */
export type EnumFileUploadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileUploadStatus'>
    


/**
 * Reference to a field of type 'FileUploadStatus[]'
 */
export type ListEnumFileUploadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileUploadStatus[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'OrderFulfilmentMethod'
 */
export type EnumOrderFulfilmentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderFulfilmentMethod'>
    


/**
 * Reference to a field of type 'OrderFulfilmentMethod[]'
 */
export type ListEnumOrderFulfilmentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderFulfilmentMethod[]'>
    


/**
 * Reference to a field of type 'PaymentMethod'
 */
export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


/**
 * Reference to a field of type 'PaymentMethod[]'
 */
export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


/**
 * Reference to a field of type 'PaymentProvider'
 */
export type EnumPaymentProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentProvider'>
    


/**
 * Reference to a field of type 'PaymentProvider[]'
 */
export type ListEnumPaymentProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentProvider[]'>
    


/**
 * Reference to a field of type 'PaymentStatus'
 */
export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


/**
 * Reference to a field of type 'PaymentStatus[]'
 */
export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


/**
 * Reference to a field of type 'CampaignType'
 */
export type EnumCampaignTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignType'>
    


/**
 * Reference to a field of type 'CampaignType[]'
 */
export type ListEnumCampaignTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignType[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  session?: Prisma.SessionOmit
  account?: Prisma.AccountOmit
  verification?: Prisma.VerificationOmit
  member?: Prisma.MemberOmit
  invitation?: Prisma.InvitationOmit
  organization?: Prisma.OrganizationOmit
  openingTimes?: Prisma.OpeningTimesOmit
  closingTimes?: Prisma.ClosingTimesOmit
  organizationConfiguration?: Prisma.OrganizationConfigurationOmit
  address?: Prisma.AddressOmit
  legalEntity?: Prisma.LegalEntityOmit
  file?: Prisma.FileOmit
  manufacturer?: Prisma.ManufacturerOmit
  manufacturerTranslation?: Prisma.ManufacturerTranslationOmit
  productCategory?: Prisma.ProductCategoryOmit
  productCategoryTranslation?: Prisma.ProductCategoryTranslationOmit
  product?: Prisma.ProductOmit
  productSnapshot?: Prisma.ProductSnapshotOmit
  productTranslation?: Prisma.ProductTranslationOmit
  modifierGroup?: Prisma.ModifierGroupOmit
  modifierGroupTranslation?: Prisma.ModifierGroupTranslationOmit
  modifier?: Prisma.ModifierOmit
  order?: Prisma.OrderOmit
  orderItem?: Prisma.OrderItemOmit
  orderItemTranslation?: Prisma.OrderItemTranslationOmit
  payment?: Prisma.PaymentOmit
  paymentSession?: Prisma.PaymentSessionOmit
  campaign?: Prisma.CampaignOmit
  shippingMethod?: Prisma.ShippingMethodOmit
  shippingZone?: Prisma.ShippingZoneOmit
  reservation?: Prisma.ReservationOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

