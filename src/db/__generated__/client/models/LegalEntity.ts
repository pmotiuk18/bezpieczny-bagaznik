
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LegalEntity` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LegalEntity
 * 
 */
export type LegalEntityModel = runtime.Types.Result.DefaultSelection<Prisma.$LegalEntityPayload>

export type AggregateLegalEntity = {
  _count: LegalEntityCountAggregateOutputType | null
  _min: LegalEntityMinAggregateOutputType | null
  _max: LegalEntityMaxAggregateOutputType | null
}

export type LegalEntityMinAggregateOutputType = {
  id: string | null
  name: string | null
  taxId: string | null
  addressId: string | null
  email: string | null
  phone: string | null
  createdAt: Date | null
  createdBy: string | null
  updatedAt: Date | null
  updatedBy: string | null
  deletedAt: Date | null
  deletedBy: string | null
}

export type LegalEntityMaxAggregateOutputType = {
  id: string | null
  name: string | null
  taxId: string | null
  addressId: string | null
  email: string | null
  phone: string | null
  createdAt: Date | null
  createdBy: string | null
  updatedAt: Date | null
  updatedBy: string | null
  deletedAt: Date | null
  deletedBy: string | null
}

export type LegalEntityCountAggregateOutputType = {
  id: number
  name: number
  taxId: number
  addressId: number
  email: number
  phone: number
  createdAt: number
  createdBy: number
  updatedAt: number
  updatedBy: number
  deletedAt: number
  deletedBy: number
  _all: number
}


export type LegalEntityMinAggregateInputType = {
  id?: true
  name?: true
  taxId?: true
  addressId?: true
  email?: true
  phone?: true
  createdAt?: true
  createdBy?: true
  updatedAt?: true
  updatedBy?: true
  deletedAt?: true
  deletedBy?: true
}

export type LegalEntityMaxAggregateInputType = {
  id?: true
  name?: true
  taxId?: true
  addressId?: true
  email?: true
  phone?: true
  createdAt?: true
  createdBy?: true
  updatedAt?: true
  updatedBy?: true
  deletedAt?: true
  deletedBy?: true
}

export type LegalEntityCountAggregateInputType = {
  id?: true
  name?: true
  taxId?: true
  addressId?: true
  email?: true
  phone?: true
  createdAt?: true
  createdBy?: true
  updatedAt?: true
  updatedBy?: true
  deletedAt?: true
  deletedBy?: true
  _all?: true
}

export type LegalEntityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LegalEntity to aggregate.
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LegalEntities to fetch.
   */
  orderBy?: Prisma.LegalEntityOrderByWithRelationInput | Prisma.LegalEntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LegalEntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LegalEntities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LegalEntities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LegalEntities
  **/
  _count?: true | LegalEntityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LegalEntityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LegalEntityMaxAggregateInputType
}

export type GetLegalEntityAggregateType<T extends LegalEntityAggregateArgs> = {
      [P in keyof T & keyof AggregateLegalEntity]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLegalEntity[P]>
    : Prisma.GetScalarType<T[P], AggregateLegalEntity[P]>
}




export type LegalEntityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LegalEntityWhereInput
  orderBy?: Prisma.LegalEntityOrderByWithAggregationInput | Prisma.LegalEntityOrderByWithAggregationInput[]
  by: Prisma.LegalEntityScalarFieldEnum[] | Prisma.LegalEntityScalarFieldEnum
  having?: Prisma.LegalEntityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LegalEntityCountAggregateInputType | true
  _min?: LegalEntityMinAggregateInputType
  _max?: LegalEntityMaxAggregateInputType
}

export type LegalEntityGroupByOutputType = {
  id: string
  name: string
  taxId: string
  addressId: string
  email: string | null
  phone: string | null
  createdAt: Date
  createdBy: string | null
  updatedAt: Date
  updatedBy: string | null
  deletedAt: Date | null
  deletedBy: string | null
  _count: LegalEntityCountAggregateOutputType | null
  _min: LegalEntityMinAggregateOutputType | null
  _max: LegalEntityMaxAggregateOutputType | null
}

type GetLegalEntityGroupByPayload<T extends LegalEntityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LegalEntityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LegalEntityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LegalEntityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LegalEntityGroupByOutputType[P]>
      }
    >
  > 



export type LegalEntityWhereInput = {
  AND?: Prisma.LegalEntityWhereInput | Prisma.LegalEntityWhereInput[]
  OR?: Prisma.LegalEntityWhereInput[]
  NOT?: Prisma.LegalEntityWhereInput | Prisma.LegalEntityWhereInput[]
  id?: Prisma.StringFilter<"LegalEntity"> | string
  name?: Prisma.StringFilter<"LegalEntity"> | string
  taxId?: Prisma.StringFilter<"LegalEntity"> | string
  addressId?: Prisma.StringFilter<"LegalEntity"> | string
  email?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  phone?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  updatedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"LegalEntity"> | Date | string | null
  deletedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  address?: Prisma.XOR<Prisma.AddressScalarRelationFilter, Prisma.AddressWhereInput>
  organizations?: Prisma.OrganizationListRelationFilter
}

export type LegalEntityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  taxId?: Prisma.SortOrder
  addressId?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.AddressOrderByWithRelationInput
  organizations?: Prisma.OrganizationOrderByRelationAggregateInput
}

export type LegalEntityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LegalEntityWhereInput | Prisma.LegalEntityWhereInput[]
  OR?: Prisma.LegalEntityWhereInput[]
  NOT?: Prisma.LegalEntityWhereInput | Prisma.LegalEntityWhereInput[]
  name?: Prisma.StringFilter<"LegalEntity"> | string
  taxId?: Prisma.StringFilter<"LegalEntity"> | string
  addressId?: Prisma.StringFilter<"LegalEntity"> | string
  email?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  phone?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  updatedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"LegalEntity"> | Date | string | null
  deletedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  address?: Prisma.XOR<Prisma.AddressScalarRelationFilter, Prisma.AddressWhereInput>
  organizations?: Prisma.OrganizationListRelationFilter
}, "id">

export type LegalEntityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  taxId?: Prisma.SortOrder
  addressId?: Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.LegalEntityCountOrderByAggregateInput
  _max?: Prisma.LegalEntityMaxOrderByAggregateInput
  _min?: Prisma.LegalEntityMinOrderByAggregateInput
}

export type LegalEntityScalarWhereWithAggregatesInput = {
  AND?: Prisma.LegalEntityScalarWhereWithAggregatesInput | Prisma.LegalEntityScalarWhereWithAggregatesInput[]
  OR?: Prisma.LegalEntityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LegalEntityScalarWhereWithAggregatesInput | Prisma.LegalEntityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LegalEntity"> | string
  name?: Prisma.StringWithAggregatesFilter<"LegalEntity"> | string
  taxId?: Prisma.StringWithAggregatesFilter<"LegalEntity"> | string
  addressId?: Prisma.StringWithAggregatesFilter<"LegalEntity"> | string
  email?: Prisma.StringNullableWithAggregatesFilter<"LegalEntity"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"LegalEntity"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LegalEntity"> | Date | string
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"LegalEntity"> | string | null
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LegalEntity"> | Date | string
  updatedBy?: Prisma.StringNullableWithAggregatesFilter<"LegalEntity"> | string | null
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"LegalEntity"> | Date | string | null
  deletedBy?: Prisma.StringNullableWithAggregatesFilter<"LegalEntity"> | string | null
}

export type LegalEntityCreateInput = {
  id?: string
  name: string
  taxId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
  address: Prisma.AddressCreateNestedOneWithoutLegalEntityInput
  organizations?: Prisma.OrganizationCreateNestedManyWithoutLegalEntityInput
}

export type LegalEntityUncheckedCreateInput = {
  id?: string
  name: string
  taxId: string
  addressId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
  organizations?: Prisma.OrganizationUncheckedCreateNestedManyWithoutLegalEntityInput
}

export type LegalEntityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.AddressUpdateOneRequiredWithoutLegalEntityNestedInput
  organizations?: Prisma.OrganizationUpdateManyWithoutLegalEntityNestedInput
}

export type LegalEntityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  addressId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizations?: Prisma.OrganizationUncheckedUpdateManyWithoutLegalEntityNestedInput
}

export type LegalEntityCreateManyInput = {
  id?: string
  name: string
  taxId: string
  addressId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
}

export type LegalEntityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LegalEntityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  addressId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LegalEntityNullableScalarRelationFilter = {
  is?: Prisma.LegalEntityWhereInput | null
  isNot?: Prisma.LegalEntityWhereInput | null
}

export type LegalEntityListRelationFilter = {
  every?: Prisma.LegalEntityWhereInput
  some?: Prisma.LegalEntityWhereInput
  none?: Prisma.LegalEntityWhereInput
}

export type LegalEntityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LegalEntityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  taxId?: Prisma.SortOrder
  addressId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  updatedBy?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type LegalEntityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  taxId?: Prisma.SortOrder
  addressId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  updatedBy?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type LegalEntityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  taxId?: Prisma.SortOrder
  addressId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  updatedBy?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type LegalEntityCreateNestedOneWithoutOrganizationsInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedCreateWithoutOrganizationsInput>
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutOrganizationsInput
  connect?: Prisma.LegalEntityWhereUniqueInput
}

export type LegalEntityUpdateOneWithoutOrganizationsNestedInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedCreateWithoutOrganizationsInput>
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutOrganizationsInput
  upsert?: Prisma.LegalEntityUpsertWithoutOrganizationsInput
  disconnect?: Prisma.LegalEntityWhereInput | boolean
  delete?: Prisma.LegalEntityWhereInput | boolean
  connect?: Prisma.LegalEntityWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LegalEntityUpdateToOneWithWhereWithoutOrganizationsInput, Prisma.LegalEntityUpdateWithoutOrganizationsInput>, Prisma.LegalEntityUncheckedUpdateWithoutOrganizationsInput>
}

export type LegalEntityCreateNestedManyWithoutAddressInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput> | Prisma.LegalEntityCreateWithoutAddressInput[] | Prisma.LegalEntityUncheckedCreateWithoutAddressInput[]
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutAddressInput | Prisma.LegalEntityCreateOrConnectWithoutAddressInput[]
  createMany?: Prisma.LegalEntityCreateManyAddressInputEnvelope
  connect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
}

export type LegalEntityUncheckedCreateNestedManyWithoutAddressInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput> | Prisma.LegalEntityCreateWithoutAddressInput[] | Prisma.LegalEntityUncheckedCreateWithoutAddressInput[]
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutAddressInput | Prisma.LegalEntityCreateOrConnectWithoutAddressInput[]
  createMany?: Prisma.LegalEntityCreateManyAddressInputEnvelope
  connect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
}

export type LegalEntityUpdateManyWithoutAddressNestedInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput> | Prisma.LegalEntityCreateWithoutAddressInput[] | Prisma.LegalEntityUncheckedCreateWithoutAddressInput[]
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutAddressInput | Prisma.LegalEntityCreateOrConnectWithoutAddressInput[]
  upsert?: Prisma.LegalEntityUpsertWithWhereUniqueWithoutAddressInput | Prisma.LegalEntityUpsertWithWhereUniqueWithoutAddressInput[]
  createMany?: Prisma.LegalEntityCreateManyAddressInputEnvelope
  set?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  disconnect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  delete?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  connect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  update?: Prisma.LegalEntityUpdateWithWhereUniqueWithoutAddressInput | Prisma.LegalEntityUpdateWithWhereUniqueWithoutAddressInput[]
  updateMany?: Prisma.LegalEntityUpdateManyWithWhereWithoutAddressInput | Prisma.LegalEntityUpdateManyWithWhereWithoutAddressInput[]
  deleteMany?: Prisma.LegalEntityScalarWhereInput | Prisma.LegalEntityScalarWhereInput[]
}

export type LegalEntityUncheckedUpdateManyWithoutAddressNestedInput = {
  create?: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput> | Prisma.LegalEntityCreateWithoutAddressInput[] | Prisma.LegalEntityUncheckedCreateWithoutAddressInput[]
  connectOrCreate?: Prisma.LegalEntityCreateOrConnectWithoutAddressInput | Prisma.LegalEntityCreateOrConnectWithoutAddressInput[]
  upsert?: Prisma.LegalEntityUpsertWithWhereUniqueWithoutAddressInput | Prisma.LegalEntityUpsertWithWhereUniqueWithoutAddressInput[]
  createMany?: Prisma.LegalEntityCreateManyAddressInputEnvelope
  set?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  disconnect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  delete?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  connect?: Prisma.LegalEntityWhereUniqueInput | Prisma.LegalEntityWhereUniqueInput[]
  update?: Prisma.LegalEntityUpdateWithWhereUniqueWithoutAddressInput | Prisma.LegalEntityUpdateWithWhereUniqueWithoutAddressInput[]
  updateMany?: Prisma.LegalEntityUpdateManyWithWhereWithoutAddressInput | Prisma.LegalEntityUpdateManyWithWhereWithoutAddressInput[]
  deleteMany?: Prisma.LegalEntityScalarWhereInput | Prisma.LegalEntityScalarWhereInput[]
}

export type LegalEntityCreateWithoutOrganizationsInput = {
  id?: string
  name: string
  taxId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
  address: Prisma.AddressCreateNestedOneWithoutLegalEntityInput
}

export type LegalEntityUncheckedCreateWithoutOrganizationsInput = {
  id?: string
  name: string
  taxId: string
  addressId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
}

export type LegalEntityCreateOrConnectWithoutOrganizationsInput = {
  where: Prisma.LegalEntityWhereUniqueInput
  create: Prisma.XOR<Prisma.LegalEntityCreateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedCreateWithoutOrganizationsInput>
}

export type LegalEntityUpsertWithoutOrganizationsInput = {
  update: Prisma.XOR<Prisma.LegalEntityUpdateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedUpdateWithoutOrganizationsInput>
  create: Prisma.XOR<Prisma.LegalEntityCreateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedCreateWithoutOrganizationsInput>
  where?: Prisma.LegalEntityWhereInput
}

export type LegalEntityUpdateToOneWithWhereWithoutOrganizationsInput = {
  where?: Prisma.LegalEntityWhereInput
  data: Prisma.XOR<Prisma.LegalEntityUpdateWithoutOrganizationsInput, Prisma.LegalEntityUncheckedUpdateWithoutOrganizationsInput>
}

export type LegalEntityUpdateWithoutOrganizationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.AddressUpdateOneRequiredWithoutLegalEntityNestedInput
}

export type LegalEntityUncheckedUpdateWithoutOrganizationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  addressId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type LegalEntityCreateWithoutAddressInput = {
  id?: string
  name: string
  taxId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
  organizations?: Prisma.OrganizationCreateNestedManyWithoutLegalEntityInput
}

export type LegalEntityUncheckedCreateWithoutAddressInput = {
  id?: string
  name: string
  taxId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
  organizations?: Prisma.OrganizationUncheckedCreateNestedManyWithoutLegalEntityInput
}

export type LegalEntityCreateOrConnectWithoutAddressInput = {
  where: Prisma.LegalEntityWhereUniqueInput
  create: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput>
}

export type LegalEntityCreateManyAddressInputEnvelope = {
  data: Prisma.LegalEntityCreateManyAddressInput | Prisma.LegalEntityCreateManyAddressInput[]
  skipDuplicates?: boolean
}

export type LegalEntityUpsertWithWhereUniqueWithoutAddressInput = {
  where: Prisma.LegalEntityWhereUniqueInput
  update: Prisma.XOR<Prisma.LegalEntityUpdateWithoutAddressInput, Prisma.LegalEntityUncheckedUpdateWithoutAddressInput>
  create: Prisma.XOR<Prisma.LegalEntityCreateWithoutAddressInput, Prisma.LegalEntityUncheckedCreateWithoutAddressInput>
}

export type LegalEntityUpdateWithWhereUniqueWithoutAddressInput = {
  where: Prisma.LegalEntityWhereUniqueInput
  data: Prisma.XOR<Prisma.LegalEntityUpdateWithoutAddressInput, Prisma.LegalEntityUncheckedUpdateWithoutAddressInput>
}

export type LegalEntityUpdateManyWithWhereWithoutAddressInput = {
  where: Prisma.LegalEntityScalarWhereInput
  data: Prisma.XOR<Prisma.LegalEntityUpdateManyMutationInput, Prisma.LegalEntityUncheckedUpdateManyWithoutAddressInput>
}

export type LegalEntityScalarWhereInput = {
  AND?: Prisma.LegalEntityScalarWhereInput | Prisma.LegalEntityScalarWhereInput[]
  OR?: Prisma.LegalEntityScalarWhereInput[]
  NOT?: Prisma.LegalEntityScalarWhereInput | Prisma.LegalEntityScalarWhereInput[]
  id?: Prisma.StringFilter<"LegalEntity"> | string
  name?: Prisma.StringFilter<"LegalEntity"> | string
  taxId?: Prisma.StringFilter<"LegalEntity"> | string
  addressId?: Prisma.StringFilter<"LegalEntity"> | string
  email?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  phone?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  createdAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  updatedAt?: Prisma.DateTimeFilter<"LegalEntity"> | Date | string
  updatedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
  deletedAt?: Prisma.DateTimeNullableFilter<"LegalEntity"> | Date | string | null
  deletedBy?: Prisma.StringNullableFilter<"LegalEntity"> | string | null
}

export type LegalEntityCreateManyAddressInput = {
  id?: string
  name: string
  taxId: string
  email?: string | null
  phone?: string | null
  createdAt?: Date | string
  createdBy?: string | null
  updatedAt?: Date | string
  updatedBy?: string | null
  deletedAt?: Date | string | null
  deletedBy?: string | null
}

export type LegalEntityUpdateWithoutAddressInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizations?: Prisma.OrganizationUpdateManyWithoutLegalEntityNestedInput
}

export type LegalEntityUncheckedUpdateWithoutAddressInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizations?: Prisma.OrganizationUncheckedUpdateManyWithoutLegalEntityNestedInput
}

export type LegalEntityUncheckedUpdateManyWithoutAddressInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  taxId?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  deletedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type LegalEntityCountOutputType
 */

export type LegalEntityCountOutputType = {
  organizations: number
}

export type LegalEntityCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organizations?: boolean | LegalEntityCountOutputTypeCountOrganizationsArgs
}

/**
 * LegalEntityCountOutputType without action
 */
export type LegalEntityCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntityCountOutputType
   */
  select?: Prisma.LegalEntityCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LegalEntityCountOutputType without action
 */
export type LegalEntityCountOutputTypeCountOrganizationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrganizationWhereInput
}


export type LegalEntitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  taxId?: boolean
  addressId?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  createdBy?: boolean
  updatedAt?: boolean
  updatedBy?: boolean
  deletedAt?: boolean
  deletedBy?: boolean
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
  organizations?: boolean | Prisma.LegalEntity$organizationsArgs<ExtArgs>
  _count?: boolean | Prisma.LegalEntityCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["legalEntity"]>

export type LegalEntitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  taxId?: boolean
  addressId?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  createdBy?: boolean
  updatedAt?: boolean
  updatedBy?: boolean
  deletedAt?: boolean
  deletedBy?: boolean
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
}, ExtArgs["result"]["legalEntity"]>

export type LegalEntitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  taxId?: boolean
  addressId?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  createdBy?: boolean
  updatedAt?: boolean
  updatedBy?: boolean
  deletedAt?: boolean
  deletedBy?: boolean
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
}, ExtArgs["result"]["legalEntity"]>

export type LegalEntitySelectScalar = {
  id?: boolean
  name?: boolean
  taxId?: boolean
  addressId?: boolean
  email?: boolean
  phone?: boolean
  createdAt?: boolean
  createdBy?: boolean
  updatedAt?: boolean
  updatedBy?: boolean
  deletedAt?: boolean
  deletedBy?: boolean
}

export type LegalEntityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "taxId" | "addressId" | "email" | "phone" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["legalEntity"]>
export type LegalEntityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
  organizations?: boolean | Prisma.LegalEntity$organizationsArgs<ExtArgs>
  _count?: boolean | Prisma.LegalEntityCountOutputTypeDefaultArgs<ExtArgs>
}
export type LegalEntityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
}
export type LegalEntityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  address?: boolean | Prisma.AddressDefaultArgs<ExtArgs>
}

export type $LegalEntityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LegalEntity"
  objects: {
    address: Prisma.$AddressPayload<ExtArgs>
    organizations: Prisma.$OrganizationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    taxId: string
    addressId: string
    email: string | null
    phone: string | null
    createdAt: Date
    createdBy: string | null
    updatedAt: Date
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }, ExtArgs["result"]["legalEntity"]>
  composites: {}
}

export type LegalEntityGetPayload<S extends boolean | null | undefined | LegalEntityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload, S>

export type LegalEntityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LegalEntityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LegalEntityCountAggregateInputType | true
  }

export interface LegalEntityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LegalEntity'], meta: { name: 'LegalEntity' } }
  /**
   * Find zero or one LegalEntity that matches the filter.
   * @param {LegalEntityFindUniqueArgs} args - Arguments to find a LegalEntity
   * @example
   * // Get one LegalEntity
   * const legalEntity = await prisma.legalEntity.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LegalEntityFindUniqueArgs>(args: Prisma.SelectSubset<T, LegalEntityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LegalEntity that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LegalEntityFindUniqueOrThrowArgs} args - Arguments to find a LegalEntity
   * @example
   * // Get one LegalEntity
   * const legalEntity = await prisma.legalEntity.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LegalEntityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LegalEntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LegalEntity that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityFindFirstArgs} args - Arguments to find a LegalEntity
   * @example
   * // Get one LegalEntity
   * const legalEntity = await prisma.legalEntity.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LegalEntityFindFirstArgs>(args?: Prisma.SelectSubset<T, LegalEntityFindFirstArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LegalEntity that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityFindFirstOrThrowArgs} args - Arguments to find a LegalEntity
   * @example
   * // Get one LegalEntity
   * const legalEntity = await prisma.legalEntity.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LegalEntityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LegalEntityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LegalEntities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LegalEntities
   * const legalEntities = await prisma.legalEntity.findMany()
   * 
   * // Get first 10 LegalEntities
   * const legalEntities = await prisma.legalEntity.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const legalEntityWithIdOnly = await prisma.legalEntity.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LegalEntityFindManyArgs>(args?: Prisma.SelectSubset<T, LegalEntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LegalEntity.
   * @param {LegalEntityCreateArgs} args - Arguments to create a LegalEntity.
   * @example
   * // Create one LegalEntity
   * const LegalEntity = await prisma.legalEntity.create({
   *   data: {
   *     // ... data to create a LegalEntity
   *   }
   * })
   * 
   */
  create<T extends LegalEntityCreateArgs>(args: Prisma.SelectSubset<T, LegalEntityCreateArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LegalEntities.
   * @param {LegalEntityCreateManyArgs} args - Arguments to create many LegalEntities.
   * @example
   * // Create many LegalEntities
   * const legalEntity = await prisma.legalEntity.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LegalEntityCreateManyArgs>(args?: Prisma.SelectSubset<T, LegalEntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LegalEntities and returns the data saved in the database.
   * @param {LegalEntityCreateManyAndReturnArgs} args - Arguments to create many LegalEntities.
   * @example
   * // Create many LegalEntities
   * const legalEntity = await prisma.legalEntity.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LegalEntities and only return the `id`
   * const legalEntityWithIdOnly = await prisma.legalEntity.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LegalEntityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LegalEntityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LegalEntity.
   * @param {LegalEntityDeleteArgs} args - Arguments to delete one LegalEntity.
   * @example
   * // Delete one LegalEntity
   * const LegalEntity = await prisma.legalEntity.delete({
   *   where: {
   *     // ... filter to delete one LegalEntity
   *   }
   * })
   * 
   */
  delete<T extends LegalEntityDeleteArgs>(args: Prisma.SelectSubset<T, LegalEntityDeleteArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LegalEntity.
   * @param {LegalEntityUpdateArgs} args - Arguments to update one LegalEntity.
   * @example
   * // Update one LegalEntity
   * const legalEntity = await prisma.legalEntity.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LegalEntityUpdateArgs>(args: Prisma.SelectSubset<T, LegalEntityUpdateArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LegalEntities.
   * @param {LegalEntityDeleteManyArgs} args - Arguments to filter LegalEntities to delete.
   * @example
   * // Delete a few LegalEntities
   * const { count } = await prisma.legalEntity.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LegalEntityDeleteManyArgs>(args?: Prisma.SelectSubset<T, LegalEntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LegalEntities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LegalEntities
   * const legalEntity = await prisma.legalEntity.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LegalEntityUpdateManyArgs>(args: Prisma.SelectSubset<T, LegalEntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LegalEntities and returns the data updated in the database.
   * @param {LegalEntityUpdateManyAndReturnArgs} args - Arguments to update many LegalEntities.
   * @example
   * // Update many LegalEntities
   * const legalEntity = await prisma.legalEntity.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LegalEntities and only return the `id`
   * const legalEntityWithIdOnly = await prisma.legalEntity.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LegalEntityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LegalEntityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LegalEntity.
   * @param {LegalEntityUpsertArgs} args - Arguments to update or create a LegalEntity.
   * @example
   * // Update or create a LegalEntity
   * const legalEntity = await prisma.legalEntity.upsert({
   *   create: {
   *     // ... data to create a LegalEntity
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LegalEntity we want to update
   *   }
   * })
   */
  upsert<T extends LegalEntityUpsertArgs>(args: Prisma.SelectSubset<T, LegalEntityUpsertArgs<ExtArgs>>): Prisma.Prisma__LegalEntityClient<runtime.Types.Result.GetResult<Prisma.$LegalEntityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LegalEntities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityCountArgs} args - Arguments to filter LegalEntities to count.
   * @example
   * // Count the number of LegalEntities
   * const count = await prisma.legalEntity.count({
   *   where: {
   *     // ... the filter for the LegalEntities we want to count
   *   }
   * })
  **/
  count<T extends LegalEntityCountArgs>(
    args?: Prisma.Subset<T, LegalEntityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LegalEntityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LegalEntity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LegalEntityAggregateArgs>(args: Prisma.Subset<T, LegalEntityAggregateArgs>): Prisma.PrismaPromise<GetLegalEntityAggregateType<T>>

  /**
   * Group by LegalEntity.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LegalEntityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LegalEntityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LegalEntityGroupByArgs['orderBy'] }
      : { orderBy?: LegalEntityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LegalEntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLegalEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LegalEntity model
 */
readonly fields: LegalEntityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LegalEntity.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LegalEntityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  address<T extends Prisma.AddressDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AddressDefaultArgs<ExtArgs>>): Prisma.Prisma__AddressClient<runtime.Types.Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organizations<T extends Prisma.LegalEntity$organizationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LegalEntity$organizationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LegalEntity model
 */
export interface LegalEntityFieldRefs {
  readonly id: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly name: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly taxId: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly addressId: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly email: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly phone: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly createdAt: Prisma.FieldRef<"LegalEntity", 'DateTime'>
  readonly createdBy: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly updatedAt: Prisma.FieldRef<"LegalEntity", 'DateTime'>
  readonly updatedBy: Prisma.FieldRef<"LegalEntity", 'String'>
  readonly deletedAt: Prisma.FieldRef<"LegalEntity", 'DateTime'>
  readonly deletedBy: Prisma.FieldRef<"LegalEntity", 'String'>
}
    

// Custom InputTypes
/**
 * LegalEntity findUnique
 */
export type LegalEntityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter, which LegalEntity to fetch.
   */
  where: Prisma.LegalEntityWhereUniqueInput
}

/**
 * LegalEntity findUniqueOrThrow
 */
export type LegalEntityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter, which LegalEntity to fetch.
   */
  where: Prisma.LegalEntityWhereUniqueInput
}

/**
 * LegalEntity findFirst
 */
export type LegalEntityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter, which LegalEntity to fetch.
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LegalEntities to fetch.
   */
  orderBy?: Prisma.LegalEntityOrderByWithRelationInput | Prisma.LegalEntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LegalEntities.
   */
  cursor?: Prisma.LegalEntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LegalEntities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LegalEntities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LegalEntities.
   */
  distinct?: Prisma.LegalEntityScalarFieldEnum | Prisma.LegalEntityScalarFieldEnum[]
}

/**
 * LegalEntity findFirstOrThrow
 */
export type LegalEntityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter, which LegalEntity to fetch.
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LegalEntities to fetch.
   */
  orderBy?: Prisma.LegalEntityOrderByWithRelationInput | Prisma.LegalEntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LegalEntities.
   */
  cursor?: Prisma.LegalEntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LegalEntities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LegalEntities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LegalEntities.
   */
  distinct?: Prisma.LegalEntityScalarFieldEnum | Prisma.LegalEntityScalarFieldEnum[]
}

/**
 * LegalEntity findMany
 */
export type LegalEntityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter, which LegalEntities to fetch.
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LegalEntities to fetch.
   */
  orderBy?: Prisma.LegalEntityOrderByWithRelationInput | Prisma.LegalEntityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LegalEntities.
   */
  cursor?: Prisma.LegalEntityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LegalEntities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LegalEntities.
   */
  skip?: number
  distinct?: Prisma.LegalEntityScalarFieldEnum | Prisma.LegalEntityScalarFieldEnum[]
}

/**
 * LegalEntity create
 */
export type LegalEntityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * The data needed to create a LegalEntity.
   */
  data: Prisma.XOR<Prisma.LegalEntityCreateInput, Prisma.LegalEntityUncheckedCreateInput>
}

/**
 * LegalEntity createMany
 */
export type LegalEntityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LegalEntities.
   */
  data: Prisma.LegalEntityCreateManyInput | Prisma.LegalEntityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LegalEntity createManyAndReturn
 */
export type LegalEntityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * The data used to create many LegalEntities.
   */
  data: Prisma.LegalEntityCreateManyInput | Prisma.LegalEntityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LegalEntity update
 */
export type LegalEntityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * The data needed to update a LegalEntity.
   */
  data: Prisma.XOR<Prisma.LegalEntityUpdateInput, Prisma.LegalEntityUncheckedUpdateInput>
  /**
   * Choose, which LegalEntity to update.
   */
  where: Prisma.LegalEntityWhereUniqueInput
}

/**
 * LegalEntity updateMany
 */
export type LegalEntityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LegalEntities.
   */
  data: Prisma.XOR<Prisma.LegalEntityUpdateManyMutationInput, Prisma.LegalEntityUncheckedUpdateManyInput>
  /**
   * Filter which LegalEntities to update
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * Limit how many LegalEntities to update.
   */
  limit?: number
}

/**
 * LegalEntity updateManyAndReturn
 */
export type LegalEntityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * The data used to update LegalEntities.
   */
  data: Prisma.XOR<Prisma.LegalEntityUpdateManyMutationInput, Prisma.LegalEntityUncheckedUpdateManyInput>
  /**
   * Filter which LegalEntities to update
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * Limit how many LegalEntities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LegalEntity upsert
 */
export type LegalEntityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * The filter to search for the LegalEntity to update in case it exists.
   */
  where: Prisma.LegalEntityWhereUniqueInput
  /**
   * In case the LegalEntity found by the `where` argument doesn't exist, create a new LegalEntity with this data.
   */
  create: Prisma.XOR<Prisma.LegalEntityCreateInput, Prisma.LegalEntityUncheckedCreateInput>
  /**
   * In case the LegalEntity was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LegalEntityUpdateInput, Prisma.LegalEntityUncheckedUpdateInput>
}

/**
 * LegalEntity delete
 */
export type LegalEntityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
  /**
   * Filter which LegalEntity to delete.
   */
  where: Prisma.LegalEntityWhereUniqueInput
}

/**
 * LegalEntity deleteMany
 */
export type LegalEntityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LegalEntities to delete
   */
  where?: Prisma.LegalEntityWhereInput
  /**
   * Limit how many LegalEntities to delete.
   */
  limit?: number
}

/**
 * LegalEntity.organizations
 */
export type LegalEntity$organizationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  where?: Prisma.OrganizationWhereInput
  orderBy?: Prisma.OrganizationOrderByWithRelationInput | Prisma.OrganizationOrderByWithRelationInput[]
  cursor?: Prisma.OrganizationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrganizationScalarFieldEnum | Prisma.OrganizationScalarFieldEnum[]
}

/**
 * LegalEntity without action
 */
export type LegalEntityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LegalEntity
   */
  select?: Prisma.LegalEntitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the LegalEntity
   */
  omit?: Prisma.LegalEntityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LegalEntityInclude<ExtArgs> | null
}
