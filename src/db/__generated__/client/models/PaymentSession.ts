
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PaymentSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentSession
 * 
 */
export type PaymentSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentSessionPayload>

export type AggregatePaymentSession = {
  _count: PaymentSessionCountAggregateOutputType | null
  _avg: PaymentSessionAvgAggregateOutputType | null
  _sum: PaymentSessionSumAggregateOutputType | null
  _min: PaymentSessionMinAggregateOutputType | null
  _max: PaymentSessionMaxAggregateOutputType | null
}

export type PaymentSessionAvgAggregateOutputType = {
  amount: number | null
}

export type PaymentSessionSumAggregateOutputType = {
  amount: number | null
}

export type PaymentSessionMinAggregateOutputType = {
  id: string | null
  referenceId: string | null
  amount: number | null
  currency: $Enums.Currency | null
  capturedAt: Date | null
  expiredAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  paymentId: string | null
}

export type PaymentSessionMaxAggregateOutputType = {
  id: string | null
  referenceId: string | null
  amount: number | null
  currency: $Enums.Currency | null
  capturedAt: Date | null
  expiredAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  paymentId: string | null
}

export type PaymentSessionCountAggregateOutputType = {
  id: number
  referenceId: number
  amount: number
  currency: number
  rawData: number
  capturedAt: number
  expiredAt: number
  createdAt: number
  updatedAt: number
  paymentId: number
  _all: number
}


export type PaymentSessionAvgAggregateInputType = {
  amount?: true
}

export type PaymentSessionSumAggregateInputType = {
  amount?: true
}

export type PaymentSessionMinAggregateInputType = {
  id?: true
  referenceId?: true
  amount?: true
  currency?: true
  capturedAt?: true
  expiredAt?: true
  createdAt?: true
  updatedAt?: true
  paymentId?: true
}

export type PaymentSessionMaxAggregateInputType = {
  id?: true
  referenceId?: true
  amount?: true
  currency?: true
  capturedAt?: true
  expiredAt?: true
  createdAt?: true
  updatedAt?: true
  paymentId?: true
}

export type PaymentSessionCountAggregateInputType = {
  id?: true
  referenceId?: true
  amount?: true
  currency?: true
  rawData?: true
  capturedAt?: true
  expiredAt?: true
  createdAt?: true
  updatedAt?: true
  paymentId?: true
  _all?: true
}

export type PaymentSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentSession to aggregate.
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentSessions to fetch.
   */
  orderBy?: Prisma.PaymentSessionOrderByWithRelationInput | Prisma.PaymentSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentSessions
  **/
  _count?: true | PaymentSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PaymentSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PaymentSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentSessionMaxAggregateInputType
}

export type GetPaymentSessionAggregateType<T extends PaymentSessionAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentSession[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentSession[P]>
}




export type PaymentSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentSessionWhereInput
  orderBy?: Prisma.PaymentSessionOrderByWithAggregationInput | Prisma.PaymentSessionOrderByWithAggregationInput[]
  by: Prisma.PaymentSessionScalarFieldEnum[] | Prisma.PaymentSessionScalarFieldEnum
  having?: Prisma.PaymentSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentSessionCountAggregateInputType | true
  _avg?: PaymentSessionAvgAggregateInputType
  _sum?: PaymentSessionSumAggregateInputType
  _min?: PaymentSessionMinAggregateInputType
  _max?: PaymentSessionMaxAggregateInputType
}

export type PaymentSessionGroupByOutputType = {
  id: string
  referenceId: string
  amount: number
  currency: $Enums.Currency
  rawData: runtime.JsonValue
  capturedAt: Date | null
  expiredAt: Date | null
  createdAt: Date
  updatedAt: Date
  paymentId: string
  _count: PaymentSessionCountAggregateOutputType | null
  _avg: PaymentSessionAvgAggregateOutputType | null
  _sum: PaymentSessionSumAggregateOutputType | null
  _min: PaymentSessionMinAggregateOutputType | null
  _max: PaymentSessionMaxAggregateOutputType | null
}

type GetPaymentSessionGroupByPayload<T extends PaymentSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentSessionGroupByOutputType[P]>
      }
    >
  > 



export type PaymentSessionWhereInput = {
  AND?: Prisma.PaymentSessionWhereInput | Prisma.PaymentSessionWhereInput[]
  OR?: Prisma.PaymentSessionWhereInput[]
  NOT?: Prisma.PaymentSessionWhereInput | Prisma.PaymentSessionWhereInput[]
  id?: Prisma.StringFilter<"PaymentSession"> | string
  referenceId?: Prisma.StringFilter<"PaymentSession"> | string
  amount?: Prisma.FloatFilter<"PaymentSession"> | number
  currency?: Prisma.EnumCurrencyFilter<"PaymentSession"> | $Enums.Currency
  rawData?: Prisma.JsonFilter<"PaymentSession">
  capturedAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  expiredAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  paymentId?: Prisma.StringFilter<"PaymentSession"> | string
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
}

export type PaymentSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  referenceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  rawData?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  payment?: Prisma.PaymentOrderByWithRelationInput
}

export type PaymentSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  referenceId?: string
  AND?: Prisma.PaymentSessionWhereInput | Prisma.PaymentSessionWhereInput[]
  OR?: Prisma.PaymentSessionWhereInput[]
  NOT?: Prisma.PaymentSessionWhereInput | Prisma.PaymentSessionWhereInput[]
  amount?: Prisma.FloatFilter<"PaymentSession"> | number
  currency?: Prisma.EnumCurrencyFilter<"PaymentSession"> | $Enums.Currency
  rawData?: Prisma.JsonFilter<"PaymentSession">
  capturedAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  expiredAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  paymentId?: Prisma.StringFilter<"PaymentSession"> | string
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
}, "id" | "referenceId">

export type PaymentSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  referenceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  rawData?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  expiredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  _count?: Prisma.PaymentSessionCountOrderByAggregateInput
  _avg?: Prisma.PaymentSessionAvgOrderByAggregateInput
  _max?: Prisma.PaymentSessionMaxOrderByAggregateInput
  _min?: Prisma.PaymentSessionMinOrderByAggregateInput
  _sum?: Prisma.PaymentSessionSumOrderByAggregateInput
}

export type PaymentSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentSessionScalarWhereWithAggregatesInput | Prisma.PaymentSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentSessionScalarWhereWithAggregatesInput | Prisma.PaymentSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PaymentSession"> | string
  referenceId?: Prisma.StringWithAggregatesFilter<"PaymentSession"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"PaymentSession"> | number
  currency?: Prisma.EnumCurrencyWithAggregatesFilter<"PaymentSession"> | $Enums.Currency
  rawData?: Prisma.JsonWithAggregatesFilter<"PaymentSession">
  capturedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PaymentSession"> | Date | string | null
  expiredAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PaymentSession"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentSession"> | Date | string
  paymentId?: Prisma.StringWithAggregatesFilter<"PaymentSession"> | string
}

export type PaymentSessionCreateInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  payment: Prisma.PaymentCreateNestedOneWithoutSessionsInput
}

export type PaymentSessionUncheckedCreateInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentId: string
}

export type PaymentSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment?: Prisma.PaymentUpdateOneRequiredWithoutSessionsNestedInput
}

export type PaymentSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PaymentSessionCreateManyInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  paymentId: string
}

export type PaymentSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PaymentSessionListRelationFilter = {
  every?: Prisma.PaymentSessionWhereInput
  some?: Prisma.PaymentSessionWhereInput
  none?: Prisma.PaymentSessionWhereInput
}

export type PaymentSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PaymentSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  referenceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  rawData?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
}

export type PaymentSessionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PaymentSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  referenceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
}

export type PaymentSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  referenceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
  expiredAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
}

export type PaymentSessionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PaymentSessionCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput> | Prisma.PaymentSessionCreateWithoutPaymentInput[] | Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput | Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.PaymentSessionCreateManyPaymentInputEnvelope
  connect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
}

export type PaymentSessionUncheckedCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput> | Prisma.PaymentSessionCreateWithoutPaymentInput[] | Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput | Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.PaymentSessionCreateManyPaymentInputEnvelope
  connect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
}

export type PaymentSessionUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput> | Prisma.PaymentSessionCreateWithoutPaymentInput[] | Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput | Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.PaymentSessionUpsertWithWhereUniqueWithoutPaymentInput | Prisma.PaymentSessionUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.PaymentSessionCreateManyPaymentInputEnvelope
  set?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  disconnect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  delete?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  connect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  update?: Prisma.PaymentSessionUpdateWithWhereUniqueWithoutPaymentInput | Prisma.PaymentSessionUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.PaymentSessionUpdateManyWithWhereWithoutPaymentInput | Prisma.PaymentSessionUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.PaymentSessionScalarWhereInput | Prisma.PaymentSessionScalarWhereInput[]
}

export type PaymentSessionUncheckedUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput> | Prisma.PaymentSessionCreateWithoutPaymentInput[] | Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput | Prisma.PaymentSessionCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.PaymentSessionUpsertWithWhereUniqueWithoutPaymentInput | Prisma.PaymentSessionUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.PaymentSessionCreateManyPaymentInputEnvelope
  set?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  disconnect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  delete?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  connect?: Prisma.PaymentSessionWhereUniqueInput | Prisma.PaymentSessionWhereUniqueInput[]
  update?: Prisma.PaymentSessionUpdateWithWhereUniqueWithoutPaymentInput | Prisma.PaymentSessionUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.PaymentSessionUpdateManyWithWhereWithoutPaymentInput | Prisma.PaymentSessionUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.PaymentSessionScalarWhereInput | Prisma.PaymentSessionScalarWhereInput[]
}

export type PaymentSessionCreateWithoutPaymentInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentSessionUncheckedCreateWithoutPaymentInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentSessionCreateOrConnectWithoutPaymentInput = {
  where: Prisma.PaymentSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput>
}

export type PaymentSessionCreateManyPaymentInputEnvelope = {
  data: Prisma.PaymentSessionCreateManyPaymentInput | Prisma.PaymentSessionCreateManyPaymentInput[]
  skipDuplicates?: boolean
}

export type PaymentSessionUpsertWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.PaymentSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PaymentSessionUpdateWithoutPaymentInput, Prisma.PaymentSessionUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.PaymentSessionCreateWithoutPaymentInput, Prisma.PaymentSessionUncheckedCreateWithoutPaymentInput>
}

export type PaymentSessionUpdateWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.PaymentSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PaymentSessionUpdateWithoutPaymentInput, Prisma.PaymentSessionUncheckedUpdateWithoutPaymentInput>
}

export type PaymentSessionUpdateManyWithWhereWithoutPaymentInput = {
  where: Prisma.PaymentSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PaymentSessionUpdateManyMutationInput, Prisma.PaymentSessionUncheckedUpdateManyWithoutPaymentInput>
}

export type PaymentSessionScalarWhereInput = {
  AND?: Prisma.PaymentSessionScalarWhereInput | Prisma.PaymentSessionScalarWhereInput[]
  OR?: Prisma.PaymentSessionScalarWhereInput[]
  NOT?: Prisma.PaymentSessionScalarWhereInput | Prisma.PaymentSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"PaymentSession"> | string
  referenceId?: Prisma.StringFilter<"PaymentSession"> | string
  amount?: Prisma.FloatFilter<"PaymentSession"> | number
  currency?: Prisma.EnumCurrencyFilter<"PaymentSession"> | $Enums.Currency
  rawData?: Prisma.JsonFilter<"PaymentSession">
  capturedAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  expiredAt?: Prisma.DateTimeNullableFilter<"PaymentSession"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentSession"> | Date | string
  paymentId?: Prisma.StringFilter<"PaymentSession"> | string
}

export type PaymentSessionCreateManyPaymentInput = {
  id?: string
  referenceId: string
  amount: number
  currency?: $Enums.Currency
  rawData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Date | string | null
  expiredAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentSessionUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentSessionUncheckedUpdateWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentSessionUncheckedUpdateManyWithoutPaymentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  referenceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
  rawData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  capturedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  expiredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PaymentSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  referenceId?: boolean
  amount?: boolean
  currency?: boolean
  rawData?: boolean
  capturedAt?: boolean
  expiredAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  paymentId?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentSession"]>

export type PaymentSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  referenceId?: boolean
  amount?: boolean
  currency?: boolean
  rawData?: boolean
  capturedAt?: boolean
  expiredAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  paymentId?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentSession"]>

export type PaymentSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  referenceId?: boolean
  amount?: boolean
  currency?: boolean
  rawData?: boolean
  capturedAt?: boolean
  expiredAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  paymentId?: boolean
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentSession"]>

export type PaymentSessionSelectScalar = {
  id?: boolean
  referenceId?: boolean
  amount?: boolean
  currency?: boolean
  rawData?: boolean
  capturedAt?: boolean
  expiredAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  paymentId?: boolean
}

export type PaymentSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "referenceId" | "amount" | "currency" | "rawData" | "capturedAt" | "expiredAt" | "createdAt" | "updatedAt" | "paymentId", ExtArgs["result"]["paymentSession"]>
export type PaymentSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}
export type PaymentSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}
export type PaymentSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}

export type $PaymentSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentSession"
  objects: {
    payment: Prisma.$PaymentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    referenceId: string
    amount: number
    currency: $Enums.Currency
    rawData: runtime.JsonValue
    capturedAt: Date | null
    expiredAt: Date | null
    createdAt: Date
    updatedAt: Date
    paymentId: string
  }, ExtArgs["result"]["paymentSession"]>
  composites: {}
}

export type PaymentSessionGetPayload<S extends boolean | null | undefined | PaymentSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload, S>

export type PaymentSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentSessionCountAggregateInputType | true
  }

export interface PaymentSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentSession'], meta: { name: 'PaymentSession' } }
  /**
   * Find zero or one PaymentSession that matches the filter.
   * @param {PaymentSessionFindUniqueArgs} args - Arguments to find a PaymentSession
   * @example
   * // Get one PaymentSession
   * const paymentSession = await prisma.paymentSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentSessionFindUniqueOrThrowArgs} args - Arguments to find a PaymentSession
   * @example
   * // Get one PaymentSession
   * const paymentSession = await prisma.paymentSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionFindFirstArgs} args - Arguments to find a PaymentSession
   * @example
   * // Get one PaymentSession
   * const paymentSession = await prisma.paymentSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionFindFirstOrThrowArgs} args - Arguments to find a PaymentSession
   * @example
   * // Get one PaymentSession
   * const paymentSession = await prisma.paymentSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentSessions
   * const paymentSessions = await prisma.paymentSession.findMany()
   * 
   * // Get first 10 PaymentSessions
   * const paymentSessions = await prisma.paymentSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentSessionWithIdOnly = await prisma.paymentSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentSessionFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentSession.
   * @param {PaymentSessionCreateArgs} args - Arguments to create a PaymentSession.
   * @example
   * // Create one PaymentSession
   * const PaymentSession = await prisma.paymentSession.create({
   *   data: {
   *     // ... data to create a PaymentSession
   *   }
   * })
   * 
   */
  create<T extends PaymentSessionCreateArgs>(args: Prisma.SelectSubset<T, PaymentSessionCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentSessions.
   * @param {PaymentSessionCreateManyArgs} args - Arguments to create many PaymentSessions.
   * @example
   * // Create many PaymentSessions
   * const paymentSession = await prisma.paymentSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentSessions and returns the data saved in the database.
   * @param {PaymentSessionCreateManyAndReturnArgs} args - Arguments to create many PaymentSessions.
   * @example
   * // Create many PaymentSessions
   * const paymentSession = await prisma.paymentSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentSessions and only return the `id`
   * const paymentSessionWithIdOnly = await prisma.paymentSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentSession.
   * @param {PaymentSessionDeleteArgs} args - Arguments to delete one PaymentSession.
   * @example
   * // Delete one PaymentSession
   * const PaymentSession = await prisma.paymentSession.delete({
   *   where: {
   *     // ... filter to delete one PaymentSession
   *   }
   * })
   * 
   */
  delete<T extends PaymentSessionDeleteArgs>(args: Prisma.SelectSubset<T, PaymentSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentSession.
   * @param {PaymentSessionUpdateArgs} args - Arguments to update one PaymentSession.
   * @example
   * // Update one PaymentSession
   * const paymentSession = await prisma.paymentSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentSessionUpdateArgs>(args: Prisma.SelectSubset<T, PaymentSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentSessions.
   * @param {PaymentSessionDeleteManyArgs} args - Arguments to filter PaymentSessions to delete.
   * @example
   * // Delete a few PaymentSessions
   * const { count } = await prisma.paymentSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentSessions
   * const paymentSession = await prisma.paymentSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentSessions and returns the data updated in the database.
   * @param {PaymentSessionUpdateManyAndReturnArgs} args - Arguments to update many PaymentSessions.
   * @example
   * // Update many PaymentSessions
   * const paymentSession = await prisma.paymentSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentSessions and only return the `id`
   * const paymentSessionWithIdOnly = await prisma.paymentSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentSession.
   * @param {PaymentSessionUpsertArgs} args - Arguments to update or create a PaymentSession.
   * @example
   * // Update or create a PaymentSession
   * const paymentSession = await prisma.paymentSession.upsert({
   *   create: {
   *     // ... data to create a PaymentSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentSession we want to update
   *   }
   * })
   */
  upsert<T extends PaymentSessionUpsertArgs>(args: Prisma.SelectSubset<T, PaymentSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentSessionClient<runtime.Types.Result.GetResult<Prisma.$PaymentSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionCountArgs} args - Arguments to filter PaymentSessions to count.
   * @example
   * // Count the number of PaymentSessions
   * const count = await prisma.paymentSession.count({
   *   where: {
   *     // ... the filter for the PaymentSessions we want to count
   *   }
   * })
  **/
  count<T extends PaymentSessionCountArgs>(
    args?: Prisma.Subset<T, PaymentSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentSessionAggregateArgs>(args: Prisma.Subset<T, PaymentSessionAggregateArgs>): Prisma.PrismaPromise<GetPaymentSessionAggregateType<T>>

  /**
   * Group by PaymentSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentSessionGroupByArgs['orderBy'] }
      : { orderBy?: PaymentSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentSession model
 */
readonly fields: PaymentSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  payment<T extends Prisma.PaymentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentClient<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentSession model
 */
export interface PaymentSessionFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentSession", 'String'>
  readonly referenceId: Prisma.FieldRef<"PaymentSession", 'String'>
  readonly amount: Prisma.FieldRef<"PaymentSession", 'Float'>
  readonly currency: Prisma.FieldRef<"PaymentSession", 'Currency'>
  readonly rawData: Prisma.FieldRef<"PaymentSession", 'Json'>
  readonly capturedAt: Prisma.FieldRef<"PaymentSession", 'DateTime'>
  readonly expiredAt: Prisma.FieldRef<"PaymentSession", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"PaymentSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PaymentSession", 'DateTime'>
  readonly paymentId: Prisma.FieldRef<"PaymentSession", 'String'>
}
    

// Custom InputTypes
/**
 * PaymentSession findUnique
 */
export type PaymentSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentSession to fetch.
   */
  where: Prisma.PaymentSessionWhereUniqueInput
}

/**
 * PaymentSession findUniqueOrThrow
 */
export type PaymentSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentSession to fetch.
   */
  where: Prisma.PaymentSessionWhereUniqueInput
}

/**
 * PaymentSession findFirst
 */
export type PaymentSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentSession to fetch.
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentSessions to fetch.
   */
  orderBy?: Prisma.PaymentSessionOrderByWithRelationInput | Prisma.PaymentSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentSessions.
   */
  cursor?: Prisma.PaymentSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentSessions.
   */
  distinct?: Prisma.PaymentSessionScalarFieldEnum | Prisma.PaymentSessionScalarFieldEnum[]
}

/**
 * PaymentSession findFirstOrThrow
 */
export type PaymentSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentSession to fetch.
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentSessions to fetch.
   */
  orderBy?: Prisma.PaymentSessionOrderByWithRelationInput | Prisma.PaymentSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentSessions.
   */
  cursor?: Prisma.PaymentSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentSessions.
   */
  distinct?: Prisma.PaymentSessionScalarFieldEnum | Prisma.PaymentSessionScalarFieldEnum[]
}

/**
 * PaymentSession findMany
 */
export type PaymentSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter, which PaymentSessions to fetch.
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentSessions to fetch.
   */
  orderBy?: Prisma.PaymentSessionOrderByWithRelationInput | Prisma.PaymentSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentSessions.
   */
  cursor?: Prisma.PaymentSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentSessions.
   */
  skip?: number
  distinct?: Prisma.PaymentSessionScalarFieldEnum | Prisma.PaymentSessionScalarFieldEnum[]
}

/**
 * PaymentSession create
 */
export type PaymentSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentSession.
   */
  data: Prisma.XOR<Prisma.PaymentSessionCreateInput, Prisma.PaymentSessionUncheckedCreateInput>
}

/**
 * PaymentSession createMany
 */
export type PaymentSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentSessions.
   */
  data: Prisma.PaymentSessionCreateManyInput | Prisma.PaymentSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentSession createManyAndReturn
 */
export type PaymentSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentSessions.
   */
  data: Prisma.PaymentSessionCreateManyInput | Prisma.PaymentSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentSession update
 */
export type PaymentSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentSession.
   */
  data: Prisma.XOR<Prisma.PaymentSessionUpdateInput, Prisma.PaymentSessionUncheckedUpdateInput>
  /**
   * Choose, which PaymentSession to update.
   */
  where: Prisma.PaymentSessionWhereUniqueInput
}

/**
 * PaymentSession updateMany
 */
export type PaymentSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentSessions.
   */
  data: Prisma.XOR<Prisma.PaymentSessionUpdateManyMutationInput, Prisma.PaymentSessionUncheckedUpdateManyInput>
  /**
   * Filter which PaymentSessions to update
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * Limit how many PaymentSessions to update.
   */
  limit?: number
}

/**
 * PaymentSession updateManyAndReturn
 */
export type PaymentSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * The data used to update PaymentSessions.
   */
  data: Prisma.XOR<Prisma.PaymentSessionUpdateManyMutationInput, Prisma.PaymentSessionUncheckedUpdateManyInput>
  /**
   * Filter which PaymentSessions to update
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * Limit how many PaymentSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentSession upsert
 */
export type PaymentSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentSession to update in case it exists.
   */
  where: Prisma.PaymentSessionWhereUniqueInput
  /**
   * In case the PaymentSession found by the `where` argument doesn't exist, create a new PaymentSession with this data.
   */
  create: Prisma.XOR<Prisma.PaymentSessionCreateInput, Prisma.PaymentSessionUncheckedCreateInput>
  /**
   * In case the PaymentSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentSessionUpdateInput, Prisma.PaymentSessionUncheckedUpdateInput>
}

/**
 * PaymentSession delete
 */
export type PaymentSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
  /**
   * Filter which PaymentSession to delete.
   */
  where: Prisma.PaymentSessionWhereUniqueInput
}

/**
 * PaymentSession deleteMany
 */
export type PaymentSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentSessions to delete
   */
  where?: Prisma.PaymentSessionWhereInput
  /**
   * Limit how many PaymentSessions to delete.
   */
  limit?: number
}

/**
 * PaymentSession without action
 */
export type PaymentSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentSession
   */
  select?: Prisma.PaymentSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentSession
   */
  omit?: Prisma.PaymentSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentSessionInclude<ExtArgs> | null
}
