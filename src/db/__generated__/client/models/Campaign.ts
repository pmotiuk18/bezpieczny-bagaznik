
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Campaign` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Campaign
 * 
 */
export type CampaignModel = runtime.Types.Result.DefaultSelection<Prisma.$CampaignPayload>

export type AggregateCampaign = {
  _count: CampaignCountAggregateOutputType | null
  _avg: CampaignAvgAggregateOutputType | null
  _sum: CampaignSumAggregateOutputType | null
  _min: CampaignMinAggregateOutputType | null
  _max: CampaignMaxAggregateOutputType | null
}

export type CampaignAvgAggregateOutputType = {
  amount: number | null
  percentage: number | null
}

export type CampaignSumAggregateOutputType = {
  amount: number | null
  percentage: number | null
}

export type CampaignMinAggregateOutputType = {
  id: string | null
  title: string | null
  type: $Enums.CampaignType | null
  validFrom: Date | null
  validTo: Date | null
  organizationId: string | null
  amount: number | null
  percentage: number | null
  publishedAt: Date | null
  publishedBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CampaignMaxAggregateOutputType = {
  id: string | null
  title: string | null
  type: $Enums.CampaignType | null
  validFrom: Date | null
  validTo: Date | null
  organizationId: string | null
  amount: number | null
  percentage: number | null
  publishedAt: Date | null
  publishedBy: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CampaignCountAggregateOutputType = {
  id: number
  title: number
  type: number
  validFrom: number
  validTo: number
  organizationId: number
  amount: number
  percentage: number
  publishedAt: number
  publishedBy: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CampaignAvgAggregateInputType = {
  amount?: true
  percentage?: true
}

export type CampaignSumAggregateInputType = {
  amount?: true
  percentage?: true
}

export type CampaignMinAggregateInputType = {
  id?: true
  title?: true
  type?: true
  validFrom?: true
  validTo?: true
  organizationId?: true
  amount?: true
  percentage?: true
  publishedAt?: true
  publishedBy?: true
  createdAt?: true
  updatedAt?: true
}

export type CampaignMaxAggregateInputType = {
  id?: true
  title?: true
  type?: true
  validFrom?: true
  validTo?: true
  organizationId?: true
  amount?: true
  percentage?: true
  publishedAt?: true
  publishedBy?: true
  createdAt?: true
  updatedAt?: true
}

export type CampaignCountAggregateInputType = {
  id?: true
  title?: true
  type?: true
  validFrom?: true
  validTo?: true
  organizationId?: true
  amount?: true
  percentage?: true
  publishedAt?: true
  publishedBy?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CampaignAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Campaign to aggregate.
   */
  where?: Prisma.CampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Campaigns to fetch.
   */
  orderBy?: Prisma.CampaignOrderByWithRelationInput | Prisma.CampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Campaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Campaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Campaigns
  **/
  _count?: true | CampaignCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CampaignAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CampaignSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CampaignMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CampaignMaxAggregateInputType
}

export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
      [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCampaign[P]>
    : Prisma.GetScalarType<T[P], AggregateCampaign[P]>
}




export type CampaignGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CampaignWhereInput
  orderBy?: Prisma.CampaignOrderByWithAggregationInput | Prisma.CampaignOrderByWithAggregationInput[]
  by: Prisma.CampaignScalarFieldEnum[] | Prisma.CampaignScalarFieldEnum
  having?: Prisma.CampaignScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CampaignCountAggregateInputType | true
  _avg?: CampaignAvgAggregateInputType
  _sum?: CampaignSumAggregateInputType
  _min?: CampaignMinAggregateInputType
  _max?: CampaignMaxAggregateInputType
}

export type CampaignGroupByOutputType = {
  id: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date
  validTo: Date
  organizationId: string
  amount: number | null
  percentage: number | null
  publishedAt: Date | null
  publishedBy: string | null
  createdAt: Date
  updatedAt: Date
  _count: CampaignCountAggregateOutputType | null
  _avg: CampaignAvgAggregateOutputType | null
  _sum: CampaignSumAggregateOutputType | null
  _min: CampaignMinAggregateOutputType | null
  _max: CampaignMaxAggregateOutputType | null
}

type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CampaignGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CampaignGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CampaignGroupByOutputType[P]>
      }
    >
  > 



export type CampaignWhereInput = {
  AND?: Prisma.CampaignWhereInput | Prisma.CampaignWhereInput[]
  OR?: Prisma.CampaignWhereInput[]
  NOT?: Prisma.CampaignWhereInput | Prisma.CampaignWhereInput[]
  id?: Prisma.StringFilter<"Campaign"> | string
  title?: Prisma.StringFilter<"Campaign"> | string
  type?: Prisma.EnumCampaignTypeFilter<"Campaign"> | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  validTo?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  organizationId?: Prisma.StringFilter<"Campaign"> | string
  amount?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  percentage?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Campaign"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Campaign"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}

export type CampaignOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  validFrom?: Prisma.SortOrder
  validTo?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  amount?: Prisma.SortOrderInput | Prisma.SortOrder
  percentage?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
}

export type CampaignWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CampaignWhereInput | Prisma.CampaignWhereInput[]
  OR?: Prisma.CampaignWhereInput[]
  NOT?: Prisma.CampaignWhereInput | Prisma.CampaignWhereInput[]
  title?: Prisma.StringFilter<"Campaign"> | string
  type?: Prisma.EnumCampaignTypeFilter<"Campaign"> | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  validTo?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  organizationId?: Prisma.StringFilter<"Campaign"> | string
  amount?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  percentage?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Campaign"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Campaign"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}, "id">

export type CampaignOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  validFrom?: Prisma.SortOrder
  validTo?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  amount?: Prisma.SortOrderInput | Prisma.SortOrder
  percentage?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  publishedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CampaignCountOrderByAggregateInput
  _avg?: Prisma.CampaignAvgOrderByAggregateInput
  _max?: Prisma.CampaignMaxOrderByAggregateInput
  _min?: Prisma.CampaignMinOrderByAggregateInput
  _sum?: Prisma.CampaignSumOrderByAggregateInput
}

export type CampaignScalarWhereWithAggregatesInput = {
  AND?: Prisma.CampaignScalarWhereWithAggregatesInput | Prisma.CampaignScalarWhereWithAggregatesInput[]
  OR?: Prisma.CampaignScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CampaignScalarWhereWithAggregatesInput | Prisma.CampaignScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Campaign"> | string
  title?: Prisma.StringWithAggregatesFilter<"Campaign"> | string
  type?: Prisma.EnumCampaignTypeWithAggregatesFilter<"Campaign"> | $Enums.CampaignType
  validFrom?: Prisma.DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  validTo?: Prisma.DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Campaign"> | string
  amount?: Prisma.FloatNullableWithAggregatesFilter<"Campaign"> | number | null
  percentage?: Prisma.FloatNullableWithAggregatesFilter<"Campaign"> | number | null
  publishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
  publishedBy?: Prisma.StringNullableWithAggregatesFilter<"Campaign"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Campaign"> | Date | string
}

export type CampaignCreateInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutCampaignsInput
}

export type CampaignUncheckedCreateInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  organizationId: string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CampaignUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutCampaignsNestedInput
}

export type CampaignUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CampaignCreateManyInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  organizationId: string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CampaignUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CampaignUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CampaignListRelationFilter = {
  every?: Prisma.CampaignWhereInput
  some?: Prisma.CampaignWhereInput
  none?: Prisma.CampaignWhereInput
}

export type CampaignOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CampaignCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  validFrom?: Prisma.SortOrder
  validTo?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CampaignAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
}

export type CampaignMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  validFrom?: Prisma.SortOrder
  validTo?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CampaignMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  type?: Prisma.SortOrder
  validFrom?: Prisma.SortOrder
  validTo?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
  publishedAt?: Prisma.SortOrder
  publishedBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CampaignSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
  percentage?: Prisma.SortOrder
}

export type CampaignCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput> | Prisma.CampaignCreateWithoutOrganizationInput[] | Prisma.CampaignUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.CampaignCreateOrConnectWithoutOrganizationInput | Prisma.CampaignCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.CampaignCreateManyOrganizationInputEnvelope
  connect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
}

export type CampaignUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput> | Prisma.CampaignCreateWithoutOrganizationInput[] | Prisma.CampaignUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.CampaignCreateOrConnectWithoutOrganizationInput | Prisma.CampaignCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.CampaignCreateManyOrganizationInputEnvelope
  connect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
}

export type CampaignUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput> | Prisma.CampaignCreateWithoutOrganizationInput[] | Prisma.CampaignUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.CampaignCreateOrConnectWithoutOrganizationInput | Prisma.CampaignCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.CampaignUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.CampaignUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.CampaignCreateManyOrganizationInputEnvelope
  set?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  disconnect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  delete?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  connect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  update?: Prisma.CampaignUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.CampaignUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.CampaignUpdateManyWithWhereWithoutOrganizationInput | Prisma.CampaignUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.CampaignScalarWhereInput | Prisma.CampaignScalarWhereInput[]
}

export type CampaignUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput> | Prisma.CampaignCreateWithoutOrganizationInput[] | Prisma.CampaignUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.CampaignCreateOrConnectWithoutOrganizationInput | Prisma.CampaignCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.CampaignUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.CampaignUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.CampaignCreateManyOrganizationInputEnvelope
  set?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  disconnect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  delete?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  connect?: Prisma.CampaignWhereUniqueInput | Prisma.CampaignWhereUniqueInput[]
  update?: Prisma.CampaignUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.CampaignUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.CampaignUpdateManyWithWhereWithoutOrganizationInput | Prisma.CampaignUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.CampaignScalarWhereInput | Prisma.CampaignScalarWhereInput[]
}

export type EnumCampaignTypeFieldUpdateOperationsInput = {
  set?: $Enums.CampaignType
}

export type CampaignCreateWithoutOrganizationInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CampaignUncheckedCreateWithoutOrganizationInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CampaignCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.CampaignWhereUniqueInput
  create: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput>
}

export type CampaignCreateManyOrganizationInputEnvelope = {
  data: Prisma.CampaignCreateManyOrganizationInput | Prisma.CampaignCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type CampaignUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.CampaignWhereUniqueInput
  update: Prisma.XOR<Prisma.CampaignUpdateWithoutOrganizationInput, Prisma.CampaignUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.CampaignCreateWithoutOrganizationInput, Prisma.CampaignUncheckedCreateWithoutOrganizationInput>
}

export type CampaignUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.CampaignWhereUniqueInput
  data: Prisma.XOR<Prisma.CampaignUpdateWithoutOrganizationInput, Prisma.CampaignUncheckedUpdateWithoutOrganizationInput>
}

export type CampaignUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.CampaignScalarWhereInput
  data: Prisma.XOR<Prisma.CampaignUpdateManyMutationInput, Prisma.CampaignUncheckedUpdateManyWithoutOrganizationInput>
}

export type CampaignScalarWhereInput = {
  AND?: Prisma.CampaignScalarWhereInput | Prisma.CampaignScalarWhereInput[]
  OR?: Prisma.CampaignScalarWhereInput[]
  NOT?: Prisma.CampaignScalarWhereInput | Prisma.CampaignScalarWhereInput[]
  id?: Prisma.StringFilter<"Campaign"> | string
  title?: Prisma.StringFilter<"Campaign"> | string
  type?: Prisma.EnumCampaignTypeFilter<"Campaign"> | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  validTo?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  organizationId?: Prisma.StringFilter<"Campaign"> | string
  amount?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  percentage?: Prisma.FloatNullableFilter<"Campaign"> | number | null
  publishedAt?: Prisma.DateTimeNullableFilter<"Campaign"> | Date | string | null
  publishedBy?: Prisma.StringNullableFilter<"Campaign"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Campaign"> | Date | string
}

export type CampaignCreateManyOrganizationInput = {
  id?: string
  title: string
  type: $Enums.CampaignType
  validFrom: Date | string
  validTo: Date | string
  amount?: number | null
  percentage?: number | null
  publishedAt?: Date | string | null
  publishedBy?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CampaignUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CampaignUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CampaignUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumCampaignTypeFieldUpdateOperationsInput | $Enums.CampaignType
  validFrom?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  validTo?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  amount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  percentage?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  publishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CampaignSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  type?: boolean
  validFrom?: boolean
  validTo?: boolean
  organizationId?: boolean
  amount?: boolean
  percentage?: boolean
  publishedAt?: boolean
  publishedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["campaign"]>

export type CampaignSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  type?: boolean
  validFrom?: boolean
  validTo?: boolean
  organizationId?: boolean
  amount?: boolean
  percentage?: boolean
  publishedAt?: boolean
  publishedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["campaign"]>

export type CampaignSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  type?: boolean
  validFrom?: boolean
  validTo?: boolean
  organizationId?: boolean
  amount?: boolean
  percentage?: boolean
  publishedAt?: boolean
  publishedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["campaign"]>

export type CampaignSelectScalar = {
  id?: boolean
  title?: boolean
  type?: boolean
  validFrom?: boolean
  validTo?: boolean
  organizationId?: boolean
  amount?: boolean
  percentage?: boolean
  publishedAt?: boolean
  publishedBy?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CampaignOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "type" | "validFrom" | "validTo" | "organizationId" | "amount" | "percentage" | "publishedAt" | "publishedBy" | "createdAt" | "updatedAt", ExtArgs["result"]["campaign"]>
export type CampaignInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type CampaignIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $CampaignPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Campaign"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    type: $Enums.CampaignType
    validFrom: Date
    validTo: Date
    organizationId: string
    amount: number | null
    percentage: number | null
    publishedAt: Date | null
    publishedBy: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["campaign"]>
  composites: {}
}

export type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CampaignPayload, S>

export type CampaignCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CampaignCountAggregateInputType | true
  }

export interface CampaignDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
  /**
   * Find zero or one Campaign that matches the filter.
   * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
   * @example
   * // Get one Campaign
   * const campaign = await prisma.campaign.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CampaignFindUniqueArgs>(args: Prisma.SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
   * @example
   * // Get one Campaign
   * const campaign = await prisma.campaign.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Campaign that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
   * @example
   * // Get one Campaign
   * const campaign = await prisma.campaign.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CampaignFindFirstArgs>(args?: Prisma.SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Campaign that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
   * @example
   * // Get one Campaign
   * const campaign = await prisma.campaign.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Campaigns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Campaigns
   * const campaigns = await prisma.campaign.findMany()
   * 
   * // Get first 10 Campaigns
   * const campaigns = await prisma.campaign.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CampaignFindManyArgs>(args?: Prisma.SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Campaign.
   * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
   * @example
   * // Create one Campaign
   * const Campaign = await prisma.campaign.create({
   *   data: {
   *     // ... data to create a Campaign
   *   }
   * })
   * 
   */
  create<T extends CampaignCreateArgs>(args: Prisma.SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Campaigns.
   * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
   * @example
   * // Create many Campaigns
   * const campaign = await prisma.campaign.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CampaignCreateManyArgs>(args?: Prisma.SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Campaigns and returns the data saved in the database.
   * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
   * @example
   * // Create many Campaigns
   * const campaign = await prisma.campaign.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Campaigns and only return the `id`
   * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Campaign.
   * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
   * @example
   * // Delete one Campaign
   * const Campaign = await prisma.campaign.delete({
   *   where: {
   *     // ... filter to delete one Campaign
   *   }
   * })
   * 
   */
  delete<T extends CampaignDeleteArgs>(args: Prisma.SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Campaign.
   * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
   * @example
   * // Update one Campaign
   * const campaign = await prisma.campaign.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CampaignUpdateArgs>(args: Prisma.SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Campaigns.
   * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
   * @example
   * // Delete a few Campaigns
   * const { count } = await prisma.campaign.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CampaignDeleteManyArgs>(args?: Prisma.SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Campaigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Campaigns
   * const campaign = await prisma.campaign.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CampaignUpdateManyArgs>(args: Prisma.SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Campaigns and returns the data updated in the database.
   * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
   * @example
   * // Update many Campaigns
   * const campaign = await prisma.campaign.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Campaigns and only return the `id`
   * const campaignWithIdOnly = await prisma.campaign.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Campaign.
   * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
   * @example
   * // Update or create a Campaign
   * const campaign = await prisma.campaign.upsert({
   *   create: {
   *     // ... data to create a Campaign
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Campaign we want to update
   *   }
   * })
   */
  upsert<T extends CampaignUpsertArgs>(args: Prisma.SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma.Prisma__CampaignClient<runtime.Types.Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Campaigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
   * @example
   * // Count the number of Campaigns
   * const count = await prisma.campaign.count({
   *   where: {
   *     // ... the filter for the Campaigns we want to count
   *   }
   * })
  **/
  count<T extends CampaignCountArgs>(
    args?: Prisma.Subset<T, CampaignCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CampaignCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Campaign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CampaignAggregateArgs>(args: Prisma.Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

  /**
   * Group by Campaign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CampaignGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CampaignGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CampaignGroupByArgs['orderBy'] }
      : { orderBy?: CampaignGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Campaign model
 */
readonly fields: CampaignFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Campaign.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Campaign model
 */
export interface CampaignFieldRefs {
  readonly id: Prisma.FieldRef<"Campaign", 'String'>
  readonly title: Prisma.FieldRef<"Campaign", 'String'>
  readonly type: Prisma.FieldRef<"Campaign", 'CampaignType'>
  readonly validFrom: Prisma.FieldRef<"Campaign", 'DateTime'>
  readonly validTo: Prisma.FieldRef<"Campaign", 'DateTime'>
  readonly organizationId: Prisma.FieldRef<"Campaign", 'String'>
  readonly amount: Prisma.FieldRef<"Campaign", 'Float'>
  readonly percentage: Prisma.FieldRef<"Campaign", 'Float'>
  readonly publishedAt: Prisma.FieldRef<"Campaign", 'DateTime'>
  readonly publishedBy: Prisma.FieldRef<"Campaign", 'String'>
  readonly createdAt: Prisma.FieldRef<"Campaign", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Campaign", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Campaign findUnique
 */
export type CampaignFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter, which Campaign to fetch.
   */
  where: Prisma.CampaignWhereUniqueInput
}

/**
 * Campaign findUniqueOrThrow
 */
export type CampaignFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter, which Campaign to fetch.
   */
  where: Prisma.CampaignWhereUniqueInput
}

/**
 * Campaign findFirst
 */
export type CampaignFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter, which Campaign to fetch.
   */
  where?: Prisma.CampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Campaigns to fetch.
   */
  orderBy?: Prisma.CampaignOrderByWithRelationInput | Prisma.CampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Campaigns.
   */
  cursor?: Prisma.CampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Campaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Campaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Campaigns.
   */
  distinct?: Prisma.CampaignScalarFieldEnum | Prisma.CampaignScalarFieldEnum[]
}

/**
 * Campaign findFirstOrThrow
 */
export type CampaignFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter, which Campaign to fetch.
   */
  where?: Prisma.CampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Campaigns to fetch.
   */
  orderBy?: Prisma.CampaignOrderByWithRelationInput | Prisma.CampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Campaigns.
   */
  cursor?: Prisma.CampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Campaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Campaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Campaigns.
   */
  distinct?: Prisma.CampaignScalarFieldEnum | Prisma.CampaignScalarFieldEnum[]
}

/**
 * Campaign findMany
 */
export type CampaignFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter, which Campaigns to fetch.
   */
  where?: Prisma.CampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Campaigns to fetch.
   */
  orderBy?: Prisma.CampaignOrderByWithRelationInput | Prisma.CampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Campaigns.
   */
  cursor?: Prisma.CampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Campaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Campaigns.
   */
  skip?: number
  distinct?: Prisma.CampaignScalarFieldEnum | Prisma.CampaignScalarFieldEnum[]
}

/**
 * Campaign create
 */
export type CampaignCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * The data needed to create a Campaign.
   */
  data: Prisma.XOR<Prisma.CampaignCreateInput, Prisma.CampaignUncheckedCreateInput>
}

/**
 * Campaign createMany
 */
export type CampaignCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Campaigns.
   */
  data: Prisma.CampaignCreateManyInput | Prisma.CampaignCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Campaign createManyAndReturn
 */
export type CampaignCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * The data used to create many Campaigns.
   */
  data: Prisma.CampaignCreateManyInput | Prisma.CampaignCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Campaign update
 */
export type CampaignUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * The data needed to update a Campaign.
   */
  data: Prisma.XOR<Prisma.CampaignUpdateInput, Prisma.CampaignUncheckedUpdateInput>
  /**
   * Choose, which Campaign to update.
   */
  where: Prisma.CampaignWhereUniqueInput
}

/**
 * Campaign updateMany
 */
export type CampaignUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Campaigns.
   */
  data: Prisma.XOR<Prisma.CampaignUpdateManyMutationInput, Prisma.CampaignUncheckedUpdateManyInput>
  /**
   * Filter which Campaigns to update
   */
  where?: Prisma.CampaignWhereInput
  /**
   * Limit how many Campaigns to update.
   */
  limit?: number
}

/**
 * Campaign updateManyAndReturn
 */
export type CampaignUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * The data used to update Campaigns.
   */
  data: Prisma.XOR<Prisma.CampaignUpdateManyMutationInput, Prisma.CampaignUncheckedUpdateManyInput>
  /**
   * Filter which Campaigns to update
   */
  where?: Prisma.CampaignWhereInput
  /**
   * Limit how many Campaigns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Campaign upsert
 */
export type CampaignUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * The filter to search for the Campaign to update in case it exists.
   */
  where: Prisma.CampaignWhereUniqueInput
  /**
   * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
   */
  create: Prisma.XOR<Prisma.CampaignCreateInput, Prisma.CampaignUncheckedCreateInput>
  /**
   * In case the Campaign was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CampaignUpdateInput, Prisma.CampaignUncheckedUpdateInput>
}

/**
 * Campaign delete
 */
export type CampaignDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
  /**
   * Filter which Campaign to delete.
   */
  where: Prisma.CampaignWhereUniqueInput
}

/**
 * Campaign deleteMany
 */
export type CampaignDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Campaigns to delete
   */
  where?: Prisma.CampaignWhereInput
  /**
   * Limit how many Campaigns to delete.
   */
  limit?: number
}

/**
 * Campaign without action
 */
export type CampaignDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Campaign
   */
  select?: Prisma.CampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Campaign
   */
  omit?: Prisma.CampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CampaignInclude<ExtArgs> | null
}
