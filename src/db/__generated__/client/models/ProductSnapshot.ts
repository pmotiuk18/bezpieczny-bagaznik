
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProductSnapshot` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductSnapshot
 * 
 */
export type ProductSnapshotModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductSnapshotPayload>

export type AggregateProductSnapshot = {
  _count: ProductSnapshotCountAggregateOutputType | null
  _min: ProductSnapshotMinAggregateOutputType | null
  _max: ProductSnapshotMaxAggregateOutputType | null
}

export type ProductSnapshotMinAggregateOutputType = {
  id: string | null
  productId: string | null
  createdAt: Date | null
  createdBy: string | null
}

export type ProductSnapshotMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  createdAt: Date | null
  createdBy: string | null
}

export type ProductSnapshotCountAggregateOutputType = {
  id: number
  productId: number
  data: number
  createdAt: number
  createdBy: number
  _all: number
}


export type ProductSnapshotMinAggregateInputType = {
  id?: true
  productId?: true
  createdAt?: true
  createdBy?: true
}

export type ProductSnapshotMaxAggregateInputType = {
  id?: true
  productId?: true
  createdAt?: true
  createdBy?: true
}

export type ProductSnapshotCountAggregateInputType = {
  id?: true
  productId?: true
  data?: true
  createdAt?: true
  createdBy?: true
  _all?: true
}

export type ProductSnapshotAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductSnapshot to aggregate.
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSnapshots to fetch.
   */
  orderBy?: Prisma.ProductSnapshotOrderByWithRelationInput | Prisma.ProductSnapshotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductSnapshotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSnapshots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSnapshots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductSnapshots
  **/
  _count?: true | ProductSnapshotCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductSnapshotMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductSnapshotMaxAggregateInputType
}

export type GetProductSnapshotAggregateType<T extends ProductSnapshotAggregateArgs> = {
      [P in keyof T & keyof AggregateProductSnapshot]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductSnapshot[P]>
    : Prisma.GetScalarType<T[P], AggregateProductSnapshot[P]>
}




export type ProductSnapshotGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductSnapshotWhereInput
  orderBy?: Prisma.ProductSnapshotOrderByWithAggregationInput | Prisma.ProductSnapshotOrderByWithAggregationInput[]
  by: Prisma.ProductSnapshotScalarFieldEnum[] | Prisma.ProductSnapshotScalarFieldEnum
  having?: Prisma.ProductSnapshotScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductSnapshotCountAggregateInputType | true
  _min?: ProductSnapshotMinAggregateInputType
  _max?: ProductSnapshotMaxAggregateInputType
}

export type ProductSnapshotGroupByOutputType = {
  id: string
  productId: string
  data: runtime.JsonValue
  createdAt: Date
  createdBy: string | null
  _count: ProductSnapshotCountAggregateOutputType | null
  _min: ProductSnapshotMinAggregateOutputType | null
  _max: ProductSnapshotMaxAggregateOutputType | null
}

type GetProductSnapshotGroupByPayload<T extends ProductSnapshotGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductSnapshotGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductSnapshotGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductSnapshotGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductSnapshotGroupByOutputType[P]>
      }
    >
  > 



export type ProductSnapshotWhereInput = {
  AND?: Prisma.ProductSnapshotWhereInput | Prisma.ProductSnapshotWhereInput[]
  OR?: Prisma.ProductSnapshotWhereInput[]
  NOT?: Prisma.ProductSnapshotWhereInput | Prisma.ProductSnapshotWhereInput[]
  id?: Prisma.StringFilter<"ProductSnapshot"> | string
  productId?: Prisma.StringFilter<"ProductSnapshot"> | string
  data?: Prisma.JsonFilter<"ProductSnapshot">
  createdAt?: Prisma.DateTimeFilter<"ProductSnapshot"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"ProductSnapshot"> | string | null
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  latestForProduct?: Prisma.XOR<Prisma.ProductNullableScalarRelationFilter, Prisma.ProductWhereInput> | null
  orderItems?: Prisma.OrderItemListRelationFilter
}

export type ProductSnapshotOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  data?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  latestForProduct?: Prisma.ProductOrderByWithRelationInput
  orderItems?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type ProductSnapshotWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductSnapshotWhereInput | Prisma.ProductSnapshotWhereInput[]
  OR?: Prisma.ProductSnapshotWhereInput[]
  NOT?: Prisma.ProductSnapshotWhereInput | Prisma.ProductSnapshotWhereInput[]
  productId?: Prisma.StringFilter<"ProductSnapshot"> | string
  data?: Prisma.JsonFilter<"ProductSnapshot">
  createdAt?: Prisma.DateTimeFilter<"ProductSnapshot"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"ProductSnapshot"> | string | null
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  latestForProduct?: Prisma.XOR<Prisma.ProductNullableScalarRelationFilter, Prisma.ProductWhereInput> | null
  orderItems?: Prisma.OrderItemListRelationFilter
}, "id">

export type ProductSnapshotOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  data?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ProductSnapshotCountOrderByAggregateInput
  _max?: Prisma.ProductSnapshotMaxOrderByAggregateInput
  _min?: Prisma.ProductSnapshotMinOrderByAggregateInput
}

export type ProductSnapshotScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductSnapshotScalarWhereWithAggregatesInput | Prisma.ProductSnapshotScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductSnapshotScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductSnapshotScalarWhereWithAggregatesInput | Prisma.ProductSnapshotScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductSnapshot"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductSnapshot"> | string
  data?: Prisma.JsonWithAggregatesFilter<"ProductSnapshot">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProductSnapshot"> | Date | string
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"ProductSnapshot"> | string | null
}

export type ProductSnapshotCreateInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  product: Prisma.ProductCreateNestedOneWithoutSnapshotsInput
  latestForProduct?: Prisma.ProductCreateNestedOneWithoutLatestSnapshotInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotUncheckedCreateInput = {
  id?: string
  productId: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  latestForProduct?: Prisma.ProductUncheckedCreateNestedOneWithoutLatestSnapshotInput
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  product?: Prisma.ProductUpdateOneRequiredWithoutSnapshotsNestedInput
  latestForProduct?: Prisma.ProductUpdateOneWithoutLatestSnapshotNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latestForProduct?: Prisma.ProductUncheckedUpdateOneWithoutLatestSnapshotNestedInput
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotCreateManyInput = {
  id?: string
  productId: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
}

export type ProductSnapshotUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductSnapshotUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductSnapshotListRelationFilter = {
  every?: Prisma.ProductSnapshotWhereInput
  some?: Prisma.ProductSnapshotWhereInput
  none?: Prisma.ProductSnapshotWhereInput
}

export type ProductSnapshotNullableScalarRelationFilter = {
  is?: Prisma.ProductSnapshotWhereInput | null
  isNot?: Prisma.ProductSnapshotWhereInput | null
}

export type ProductSnapshotOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductSnapshotCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  data?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type ProductSnapshotMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type ProductSnapshotMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
}

export type ProductSnapshotCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput> | Prisma.ProductSnapshotCreateWithoutProductInput[] | Prisma.ProductSnapshotUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutProductInput | Prisma.ProductSnapshotCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductSnapshotCreateManyProductInputEnvelope
  connect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
}

export type ProductSnapshotCreateNestedOneWithoutLatestForProductInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutLatestForProductInput>
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutLatestForProductInput
  connect?: Prisma.ProductSnapshotWhereUniqueInput
}

export type ProductSnapshotUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput> | Prisma.ProductSnapshotCreateWithoutProductInput[] | Prisma.ProductSnapshotUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutProductInput | Prisma.ProductSnapshotCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductSnapshotCreateManyProductInputEnvelope
  connect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
}

export type ProductSnapshotUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput> | Prisma.ProductSnapshotCreateWithoutProductInput[] | Prisma.ProductSnapshotUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutProductInput | Prisma.ProductSnapshotCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductSnapshotUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductSnapshotUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductSnapshotCreateManyProductInputEnvelope
  set?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  disconnect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  delete?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  connect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  update?: Prisma.ProductSnapshotUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductSnapshotUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductSnapshotUpdateManyWithWhereWithoutProductInput | Prisma.ProductSnapshotUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductSnapshotScalarWhereInput | Prisma.ProductSnapshotScalarWhereInput[]
}

export type ProductSnapshotUpdateOneWithoutLatestForProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutLatestForProductInput>
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutLatestForProductInput
  upsert?: Prisma.ProductSnapshotUpsertWithoutLatestForProductInput
  disconnect?: Prisma.ProductSnapshotWhereInput | boolean
  delete?: Prisma.ProductSnapshotWhereInput | boolean
  connect?: Prisma.ProductSnapshotWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductSnapshotUpdateToOneWithWhereWithoutLatestForProductInput, Prisma.ProductSnapshotUpdateWithoutLatestForProductInput>, Prisma.ProductSnapshotUncheckedUpdateWithoutLatestForProductInput>
}

export type ProductSnapshotUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput> | Prisma.ProductSnapshotCreateWithoutProductInput[] | Prisma.ProductSnapshotUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutProductInput | Prisma.ProductSnapshotCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductSnapshotUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductSnapshotUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductSnapshotCreateManyProductInputEnvelope
  set?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  disconnect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  delete?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  connect?: Prisma.ProductSnapshotWhereUniqueInput | Prisma.ProductSnapshotWhereUniqueInput[]
  update?: Prisma.ProductSnapshotUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductSnapshotUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductSnapshotUpdateManyWithWhereWithoutProductInput | Prisma.ProductSnapshotUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductSnapshotScalarWhereInput | Prisma.ProductSnapshotScalarWhereInput[]
}

export type ProductSnapshotCreateNestedOneWithoutOrderItemsInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutOrderItemsInput
  connect?: Prisma.ProductSnapshotWhereUniqueInput
}

export type ProductSnapshotUpdateOneWithoutOrderItemsNestedInput = {
  create?: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.ProductSnapshotCreateOrConnectWithoutOrderItemsInput
  upsert?: Prisma.ProductSnapshotUpsertWithoutOrderItemsInput
  disconnect?: Prisma.ProductSnapshotWhereInput | boolean
  delete?: Prisma.ProductSnapshotWhereInput | boolean
  connect?: Prisma.ProductSnapshotWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductSnapshotUpdateToOneWithWhereWithoutOrderItemsInput, Prisma.ProductSnapshotUpdateWithoutOrderItemsInput>, Prisma.ProductSnapshotUncheckedUpdateWithoutOrderItemsInput>
}

export type ProductSnapshotCreateWithoutProductInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  latestForProduct?: Prisma.ProductCreateNestedOneWithoutLatestSnapshotInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotUncheckedCreateWithoutProductInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  latestForProduct?: Prisma.ProductUncheckedCreateNestedOneWithoutLatestSnapshotInput
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductSnapshotWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput>
}

export type ProductSnapshotCreateManyProductInputEnvelope = {
  data: Prisma.ProductSnapshotCreateManyProductInput | Prisma.ProductSnapshotCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductSnapshotCreateWithoutLatestForProductInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  product: Prisma.ProductCreateNestedOneWithoutSnapshotsInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotUncheckedCreateWithoutLatestForProductInput = {
  id?: string
  productId: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutProductSnapshotInput
}

export type ProductSnapshotCreateOrConnectWithoutLatestForProductInput = {
  where: Prisma.ProductSnapshotWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutLatestForProductInput>
}

export type ProductSnapshotUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductSnapshotWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutProductInput, Prisma.ProductSnapshotUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutProductInput>
}

export type ProductSnapshotUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductSnapshotWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutProductInput, Prisma.ProductSnapshotUncheckedUpdateWithoutProductInput>
}

export type ProductSnapshotUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductSnapshotScalarWhereInput
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateManyMutationInput, Prisma.ProductSnapshotUncheckedUpdateManyWithoutProductInput>
}

export type ProductSnapshotScalarWhereInput = {
  AND?: Prisma.ProductSnapshotScalarWhereInput | Prisma.ProductSnapshotScalarWhereInput[]
  OR?: Prisma.ProductSnapshotScalarWhereInput[]
  NOT?: Prisma.ProductSnapshotScalarWhereInput | Prisma.ProductSnapshotScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductSnapshot"> | string
  productId?: Prisma.StringFilter<"ProductSnapshot"> | string
  data?: Prisma.JsonFilter<"ProductSnapshot">
  createdAt?: Prisma.DateTimeFilter<"ProductSnapshot"> | Date | string
  createdBy?: Prisma.StringNullableFilter<"ProductSnapshot"> | string | null
}

export type ProductSnapshotUpsertWithoutLatestForProductInput = {
  update: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedUpdateWithoutLatestForProductInput>
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedCreateWithoutLatestForProductInput>
  where?: Prisma.ProductSnapshotWhereInput
}

export type ProductSnapshotUpdateToOneWithWhereWithoutLatestForProductInput = {
  where?: Prisma.ProductSnapshotWhereInput
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutLatestForProductInput, Prisma.ProductSnapshotUncheckedUpdateWithoutLatestForProductInput>
}

export type ProductSnapshotUpdateWithoutLatestForProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  product?: Prisma.ProductUpdateOneRequiredWithoutSnapshotsNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotUncheckedUpdateWithoutLatestForProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotCreateWithoutOrderItemsInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  product: Prisma.ProductCreateNestedOneWithoutSnapshotsInput
  latestForProduct?: Prisma.ProductCreateNestedOneWithoutLatestSnapshotInput
}

export type ProductSnapshotUncheckedCreateWithoutOrderItemsInput = {
  id?: string
  productId: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
  latestForProduct?: Prisma.ProductUncheckedCreateNestedOneWithoutLatestSnapshotInput
}

export type ProductSnapshotCreateOrConnectWithoutOrderItemsInput = {
  where: Prisma.ProductSnapshotWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedCreateWithoutOrderItemsInput>
}

export type ProductSnapshotUpsertWithoutOrderItemsInput = {
  update: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedUpdateWithoutOrderItemsInput>
  create: Prisma.XOR<Prisma.ProductSnapshotCreateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedCreateWithoutOrderItemsInput>
  where?: Prisma.ProductSnapshotWhereInput
}

export type ProductSnapshotUpdateToOneWithWhereWithoutOrderItemsInput = {
  where?: Prisma.ProductSnapshotWhereInput
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateWithoutOrderItemsInput, Prisma.ProductSnapshotUncheckedUpdateWithoutOrderItemsInput>
}

export type ProductSnapshotUpdateWithoutOrderItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  product?: Prisma.ProductUpdateOneRequiredWithoutSnapshotsNestedInput
  latestForProduct?: Prisma.ProductUpdateOneWithoutLatestSnapshotNestedInput
}

export type ProductSnapshotUncheckedUpdateWithoutOrderItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latestForProduct?: Prisma.ProductUncheckedUpdateOneWithoutLatestSnapshotNestedInput
}

export type ProductSnapshotCreateManyProductInput = {
  id?: string
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  createdBy?: string | null
}

export type ProductSnapshotUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latestForProduct?: Prisma.ProductUpdateOneWithoutLatestSnapshotNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  latestForProduct?: Prisma.ProductUncheckedUpdateOneWithoutLatestSnapshotNestedInput
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutProductSnapshotNestedInput
}

export type ProductSnapshotUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type ProductSnapshotCountOutputType
 */

export type ProductSnapshotCountOutputType = {
  orderItems: number
}

export type ProductSnapshotCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  orderItems?: boolean | ProductSnapshotCountOutputTypeCountOrderItemsArgs
}

/**
 * ProductSnapshotCountOutputType without action
 */
export type ProductSnapshotCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshotCountOutputType
   */
  select?: Prisma.ProductSnapshotCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductSnapshotCountOutputType without action
 */
export type ProductSnapshotCountOutputTypeCountOrderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type ProductSnapshotSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  data?: boolean
  createdAt?: boolean
  createdBy?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  latestForProduct?: boolean | Prisma.ProductSnapshot$latestForProductArgs<ExtArgs>
  orderItems?: boolean | Prisma.ProductSnapshot$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductSnapshotCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSnapshot"]>

export type ProductSnapshotSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  data?: boolean
  createdAt?: boolean
  createdBy?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSnapshot"]>

export type ProductSnapshotSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  data?: boolean
  createdAt?: boolean
  createdBy?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productSnapshot"]>

export type ProductSnapshotSelectScalar = {
  id?: boolean
  productId?: boolean
  data?: boolean
  createdAt?: boolean
  createdBy?: boolean
}

export type ProductSnapshotOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "data" | "createdAt" | "createdBy", ExtArgs["result"]["productSnapshot"]>
export type ProductSnapshotInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  latestForProduct?: boolean | Prisma.ProductSnapshot$latestForProductArgs<ExtArgs>
  orderItems?: boolean | Prisma.ProductSnapshot$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductSnapshotCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProductSnapshotIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductSnapshotIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductSnapshotPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductSnapshot"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
    latestForProduct: Prisma.$ProductPayload<ExtArgs> | null
    orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    data: runtime.JsonValue
    createdAt: Date
    createdBy: string | null
  }, ExtArgs["result"]["productSnapshot"]>
  composites: {}
}

export type ProductSnapshotGetPayload<S extends boolean | null | undefined | ProductSnapshotDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload, S>

export type ProductSnapshotCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductSnapshotCountAggregateInputType | true
  }

export interface ProductSnapshotDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSnapshot'], meta: { name: 'ProductSnapshot' } }
  /**
   * Find zero or one ProductSnapshot that matches the filter.
   * @param {ProductSnapshotFindUniqueArgs} args - Arguments to find a ProductSnapshot
   * @example
   * // Get one ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductSnapshotFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductSnapshotFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductSnapshot that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductSnapshotFindUniqueOrThrowArgs} args - Arguments to find a ProductSnapshot
   * @example
   * // Get one ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductSnapshotFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductSnapshot that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotFindFirstArgs} args - Arguments to find a ProductSnapshot
   * @example
   * // Get one ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductSnapshotFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductSnapshot that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotFindFirstOrThrowArgs} args - Arguments to find a ProductSnapshot
   * @example
   * // Get one ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductSnapshotFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductSnapshots that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductSnapshots
   * const productSnapshots = await prisma.productSnapshot.findMany()
   * 
   * // Get first 10 ProductSnapshots
   * const productSnapshots = await prisma.productSnapshot.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productSnapshotWithIdOnly = await prisma.productSnapshot.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductSnapshotFindManyArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductSnapshot.
   * @param {ProductSnapshotCreateArgs} args - Arguments to create a ProductSnapshot.
   * @example
   * // Create one ProductSnapshot
   * const ProductSnapshot = await prisma.productSnapshot.create({
   *   data: {
   *     // ... data to create a ProductSnapshot
   *   }
   * })
   * 
   */
  create<T extends ProductSnapshotCreateArgs>(args: Prisma.SelectSubset<T, ProductSnapshotCreateArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductSnapshots.
   * @param {ProductSnapshotCreateManyArgs} args - Arguments to create many ProductSnapshots.
   * @example
   * // Create many ProductSnapshots
   * const productSnapshot = await prisma.productSnapshot.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductSnapshotCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductSnapshots and returns the data saved in the database.
   * @param {ProductSnapshotCreateManyAndReturnArgs} args - Arguments to create many ProductSnapshots.
   * @example
   * // Create many ProductSnapshots
   * const productSnapshot = await prisma.productSnapshot.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductSnapshots and only return the `id`
   * const productSnapshotWithIdOnly = await prisma.productSnapshot.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductSnapshotCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductSnapshot.
   * @param {ProductSnapshotDeleteArgs} args - Arguments to delete one ProductSnapshot.
   * @example
   * // Delete one ProductSnapshot
   * const ProductSnapshot = await prisma.productSnapshot.delete({
   *   where: {
   *     // ... filter to delete one ProductSnapshot
   *   }
   * })
   * 
   */
  delete<T extends ProductSnapshotDeleteArgs>(args: Prisma.SelectSubset<T, ProductSnapshotDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductSnapshot.
   * @param {ProductSnapshotUpdateArgs} args - Arguments to update one ProductSnapshot.
   * @example
   * // Update one ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductSnapshotUpdateArgs>(args: Prisma.SelectSubset<T, ProductSnapshotUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductSnapshots.
   * @param {ProductSnapshotDeleteManyArgs} args - Arguments to filter ProductSnapshots to delete.
   * @example
   * // Delete a few ProductSnapshots
   * const { count } = await prisma.productSnapshot.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductSnapshotDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductSnapshots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductSnapshots
   * const productSnapshot = await prisma.productSnapshot.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductSnapshotUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductSnapshots and returns the data updated in the database.
   * @param {ProductSnapshotUpdateManyAndReturnArgs} args - Arguments to update many ProductSnapshots.
   * @example
   * // Update many ProductSnapshots
   * const productSnapshot = await prisma.productSnapshot.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductSnapshots and only return the `id`
   * const productSnapshotWithIdOnly = await prisma.productSnapshot.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductSnapshotUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductSnapshot.
   * @param {ProductSnapshotUpsertArgs} args - Arguments to update or create a ProductSnapshot.
   * @example
   * // Update or create a ProductSnapshot
   * const productSnapshot = await prisma.productSnapshot.upsert({
   *   create: {
   *     // ... data to create a ProductSnapshot
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductSnapshot we want to update
   *   }
   * })
   */
  upsert<T extends ProductSnapshotUpsertArgs>(args: Prisma.SelectSubset<T, ProductSnapshotUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductSnapshotClient<runtime.Types.Result.GetResult<Prisma.$ProductSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductSnapshots.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotCountArgs} args - Arguments to filter ProductSnapshots to count.
   * @example
   * // Count the number of ProductSnapshots
   * const count = await prisma.productSnapshot.count({
   *   where: {
   *     // ... the filter for the ProductSnapshots we want to count
   *   }
   * })
  **/
  count<T extends ProductSnapshotCountArgs>(
    args?: Prisma.Subset<T, ProductSnapshotCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductSnapshotCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductSnapshot.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductSnapshotAggregateArgs>(args: Prisma.Subset<T, ProductSnapshotAggregateArgs>): Prisma.PrismaPromise<GetProductSnapshotAggregateType<T>>

  /**
   * Group by ProductSnapshot.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductSnapshotGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductSnapshotGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductSnapshotGroupByArgs['orderBy'] }
      : { orderBy?: ProductSnapshotGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductSnapshot model
 */
readonly fields: ProductSnapshotFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductSnapshot.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductSnapshotClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  latestForProduct<T extends Prisma.ProductSnapshot$latestForProductArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductSnapshot$latestForProductArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  orderItems<T extends Prisma.ProductSnapshot$orderItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductSnapshot$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductSnapshot model
 */
export interface ProductSnapshotFieldRefs {
  readonly id: Prisma.FieldRef<"ProductSnapshot", 'String'>
  readonly productId: Prisma.FieldRef<"ProductSnapshot", 'String'>
  readonly data: Prisma.FieldRef<"ProductSnapshot", 'Json'>
  readonly createdAt: Prisma.FieldRef<"ProductSnapshot", 'DateTime'>
  readonly createdBy: Prisma.FieldRef<"ProductSnapshot", 'String'>
}
    

// Custom InputTypes
/**
 * ProductSnapshot findUnique
 */
export type ProductSnapshotFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter, which ProductSnapshot to fetch.
   */
  where: Prisma.ProductSnapshotWhereUniqueInput
}

/**
 * ProductSnapshot findUniqueOrThrow
 */
export type ProductSnapshotFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter, which ProductSnapshot to fetch.
   */
  where: Prisma.ProductSnapshotWhereUniqueInput
}

/**
 * ProductSnapshot findFirst
 */
export type ProductSnapshotFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter, which ProductSnapshot to fetch.
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSnapshots to fetch.
   */
  orderBy?: Prisma.ProductSnapshotOrderByWithRelationInput | Prisma.ProductSnapshotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductSnapshots.
   */
  cursor?: Prisma.ProductSnapshotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSnapshots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSnapshots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductSnapshots.
   */
  distinct?: Prisma.ProductSnapshotScalarFieldEnum | Prisma.ProductSnapshotScalarFieldEnum[]
}

/**
 * ProductSnapshot findFirstOrThrow
 */
export type ProductSnapshotFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter, which ProductSnapshot to fetch.
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSnapshots to fetch.
   */
  orderBy?: Prisma.ProductSnapshotOrderByWithRelationInput | Prisma.ProductSnapshotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductSnapshots.
   */
  cursor?: Prisma.ProductSnapshotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSnapshots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSnapshots.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductSnapshots.
   */
  distinct?: Prisma.ProductSnapshotScalarFieldEnum | Prisma.ProductSnapshotScalarFieldEnum[]
}

/**
 * ProductSnapshot findMany
 */
export type ProductSnapshotFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter, which ProductSnapshots to fetch.
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductSnapshots to fetch.
   */
  orderBy?: Prisma.ProductSnapshotOrderByWithRelationInput | Prisma.ProductSnapshotOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductSnapshots.
   */
  cursor?: Prisma.ProductSnapshotWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductSnapshots from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductSnapshots.
   */
  skip?: number
  distinct?: Prisma.ProductSnapshotScalarFieldEnum | Prisma.ProductSnapshotScalarFieldEnum[]
}

/**
 * ProductSnapshot create
 */
export type ProductSnapshotCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductSnapshot.
   */
  data: Prisma.XOR<Prisma.ProductSnapshotCreateInput, Prisma.ProductSnapshotUncheckedCreateInput>
}

/**
 * ProductSnapshot createMany
 */
export type ProductSnapshotCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductSnapshots.
   */
  data: Prisma.ProductSnapshotCreateManyInput | Prisma.ProductSnapshotCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductSnapshot createManyAndReturn
 */
export type ProductSnapshotCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * The data used to create many ProductSnapshots.
   */
  data: Prisma.ProductSnapshotCreateManyInput | Prisma.ProductSnapshotCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductSnapshot update
 */
export type ProductSnapshotUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductSnapshot.
   */
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateInput, Prisma.ProductSnapshotUncheckedUpdateInput>
  /**
   * Choose, which ProductSnapshot to update.
   */
  where: Prisma.ProductSnapshotWhereUniqueInput
}

/**
 * ProductSnapshot updateMany
 */
export type ProductSnapshotUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductSnapshots.
   */
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateManyMutationInput, Prisma.ProductSnapshotUncheckedUpdateManyInput>
  /**
   * Filter which ProductSnapshots to update
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * Limit how many ProductSnapshots to update.
   */
  limit?: number
}

/**
 * ProductSnapshot updateManyAndReturn
 */
export type ProductSnapshotUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * The data used to update ProductSnapshots.
   */
  data: Prisma.XOR<Prisma.ProductSnapshotUpdateManyMutationInput, Prisma.ProductSnapshotUncheckedUpdateManyInput>
  /**
   * Filter which ProductSnapshots to update
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * Limit how many ProductSnapshots to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductSnapshot upsert
 */
export type ProductSnapshotUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductSnapshot to update in case it exists.
   */
  where: Prisma.ProductSnapshotWhereUniqueInput
  /**
   * In case the ProductSnapshot found by the `where` argument doesn't exist, create a new ProductSnapshot with this data.
   */
  create: Prisma.XOR<Prisma.ProductSnapshotCreateInput, Prisma.ProductSnapshotUncheckedCreateInput>
  /**
   * In case the ProductSnapshot was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductSnapshotUpdateInput, Prisma.ProductSnapshotUncheckedUpdateInput>
}

/**
 * ProductSnapshot delete
 */
export type ProductSnapshotDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
  /**
   * Filter which ProductSnapshot to delete.
   */
  where: Prisma.ProductSnapshotWhereUniqueInput
}

/**
 * ProductSnapshot deleteMany
 */
export type ProductSnapshotDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductSnapshots to delete
   */
  where?: Prisma.ProductSnapshotWhereInput
  /**
   * Limit how many ProductSnapshots to delete.
   */
  limit?: number
}

/**
 * ProductSnapshot.latestForProduct
 */
export type ProductSnapshot$latestForProductArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Product
   */
  select?: Prisma.ProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Product
   */
  omit?: Prisma.ProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductInclude<ExtArgs> | null
  where?: Prisma.ProductWhereInput
}

/**
 * ProductSnapshot.orderItems
 */
export type ProductSnapshot$orderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * ProductSnapshot without action
 */
export type ProductSnapshotDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductSnapshot
   */
  select?: Prisma.ProductSnapshotSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductSnapshot
   */
  omit?: Prisma.ProductSnapshotOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductSnapshotInclude<ExtArgs> | null
}
