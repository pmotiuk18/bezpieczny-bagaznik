
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  activeOrganizationId: 'activeOrganizationId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  role: 'role',
  status: 'status',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  phone: 'phone',
  email: 'email',
  legalEntityId: 'legalEntityId',
  addressId: 'addressId',
  configurationId: 'configurationId',
  logo: 'logo',
  logoId: 'logoId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.OpeningTimesScalarFieldEnum = {
  id: 'id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday'
};

exports.Prisma.ClosingTimesScalarFieldEnum = {
  id: 'id',
  monday: 'monday',
  tuesday: 'tuesday',
  wednesday: 'wednesday',
  thursday: 'thursday',
  friday: 'friday',
  saturday: 'saturday',
  sunday: 'sunday'
};

exports.Prisma.OrganizationConfigurationScalarFieldEnum = {
  id: 'id',
  hostname: 'hostname',
  countriesShipping: 'countriesShipping',
  stripeAccountId: 'stripeAccountId',
  enableHostCheckout: 'enableHostCheckout',
  enableHostTracking: 'enableHostTracking',
  isAcceptingOrders: 'isAcceptingOrders',
  defaultCurrency: 'defaultCurrency',
  defaultLocale: 'defaultLocale',
  supportedLocales: 'supportedLocales',
  openingTimesId: 'openingTimesId',
  closingTimesId: 'closingTimesId',
  facebookProfile: 'facebookProfile',
  instagramProfile: 'instagramProfile',
  xProfile: 'xProfile',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  phone: 'phone',
  addressLineOne: 'addressLineOne',
  doorNumber: 'doorNumber',
  addressLineTwo: 'addressLineTwo',
  zipCode: 'zipCode',
  placeId: 'placeId',
  deliveryInstructions: 'deliveryInstructions',
  city: 'city',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.LegalEntityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  taxId: 'taxId',
  addressId: 'addressId',
  email: 'email',
  phone: 'phone',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  mimeType: 'mimeType',
  size: 'size',
  filename: 'filename',
  url: 'url',
  status: 'status',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ManufacturerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logoId: 'logoId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ManufacturerTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  about: 'about',
  manufacturerId: 'manufacturerId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  organizationId: 'organizationId',
  priority: 'priority',
  imageId: 'imageId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy'
};

exports.Prisma.ProductCategoryTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  productCategoryId: 'productCategoryId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  content: 'content',
  slug: 'slug',
  sku: 'sku',
  basePrice: 'basePrice',
  discountedBasePrice: 'discountedBasePrice',
  currency: 'currency',
  organizationId: 'organizationId',
  manufacturerId: 'manufacturerId',
  tags: 'tags',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  latestSnapshotId: 'latestSnapshotId'
};

exports.Prisma.ProductSnapshotScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  data: 'data',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.ProductTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  productId: 'productId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ModifierGroupScalarFieldEnum = {
  id: 'id',
  selectMin: 'selectMin',
  selectMax: 'selectMax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModifierGroupTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  description: 'description',
  modifierGroupId: 'modifierGroupId'
};

exports.Prisma.ModifierScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  sku: 'sku',
  price: 'price',
  modifierGroupId: 'modifierGroupId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  paymentId: 'paymentId',
  token: 'token',
  expiresAt: 'expiresAt',
  referenceId: 'referenceId',
  fulfilmentMethod: 'fulfilmentMethod',
  shippingMethodId: 'shippingMethodId',
  shippingAddressId: 'shippingAddressId',
  dateOfExecution: 'dateOfExecution',
  currency: 'currency',
  sourceIp: 'sourceIp',
  acceptedAt: 'acceptedAt',
  readyForDispatchAt: 'readyForDispatchAt',
  dispatchedAt: 'dispatchedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  orderId: 'orderId',
  rawData: 'rawData',
  productSnapshotId: 'productSnapshotId',
  imageId: 'imageId'
};

exports.Prisma.OrderItemTranslationScalarFieldEnum = {
  id: 'id',
  locale: 'locale',
  title: 'title',
  subtitle: 'subtitle',
  orderItemId: 'orderItemId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  provider: 'provider',
  shipping: 'shipping',
  subtotal: 'subtotal',
  total: 'total',
  discount: 'discount',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentSessionScalarFieldEnum = {
  id: 'id',
  referenceId: 'referenceId',
  amount: 'amount',
  currency: 'currency',
  rawData: 'rawData',
  capturedAt: 'capturedAt',
  expiredAt: 'expiredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentId: 'paymentId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  validFrom: 'validFrom',
  validTo: 'validTo',
  organizationId: 'organizationId',
  amount: 'amount',
  percentage: 'percentage',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingMethodScalarFieldEnum = {
  id: 'id',
  title: 'title',
  providerName: 'providerName',
  providerLogoId: 'providerLogoId',
  requireDateOfDelivery: 'requireDateOfDelivery',
  organizationId: 'organizationId',
  archivedAt: 'archivedAt',
  archivedBy: 'archivedBy',
  publishedAt: 'publishedAt',
  publishedBy: 'publishedBy',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ShippingZoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  distanceUpto: 'distanceUpto',
  price: 'price',
  minimumOrderAmount: 'minimumOrderAmount',
  shippingMethodId: 'shippingMethodId',
  eta: 'eta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  userId: 'userId',
  guests: 'guests',
  phone: 'phone',
  date: 'date',
  referenceId: 'referenceId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  cancelledAt: 'cancelledAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Currency = exports.$Enums.Currency = {
  USD: 'USD',
  EUR: 'EUR',
  GBP: 'GBP',
  JPY: 'JPY',
  AUD: 'AUD',
  CAD: 'CAD',
  CHF: 'CHF',
  CNY: 'CNY',
  SEK: 'SEK',
  NZD: 'NZD',
  MXN: 'MXN',
  SGD: 'SGD',
  HKD: 'HKD',
  NOK: 'NOK',
  KRW: 'KRW',
  TRY: 'TRY',
  RUB: 'RUB',
  INR: 'INR',
  BRL: 'BRL',
  ZAR: 'ZAR',
  DKK: 'DKK',
  PLN: 'PLN',
  THB: 'THB',
  IDR: 'IDR',
  HUF: 'HUF',
  CZK: 'CZK',
  ILS: 'ILS',
  PHP: 'PHP',
  AED: 'AED',
  COP: 'COP',
  SAR: 'SAR',
  MYR: 'MYR',
  RON: 'RON'
};

exports.Locale = exports.$Enums.Locale = {
  af: 'af',
  sq: 'sq',
  ar_dz: 'ar_dz',
  ar_bh: 'ar_bh',
  ar_eg: 'ar_eg',
  ar_iq: 'ar_iq',
  ar_jo: 'ar_jo',
  ar_kw: 'ar_kw',
  ar_lb: 'ar_lb',
  ar_ly: 'ar_ly',
  ar_ma: 'ar_ma',
  ar_om: 'ar_om',
  ar_qa: 'ar_qa',
  ar_sa: 'ar_sa',
  ar_sy: 'ar_sy',
  ar_tn: 'ar_tn',
  ar_ae: 'ar_ae',
  ar_ye: 'ar_ye',
  eu: 'eu',
  be: 'be',
  bg: 'bg',
  ca: 'ca',
  zh_hk: 'zh_hk',
  zh_cn: 'zh_cn',
  zh_sg: 'zh_sg',
  zh_tw: 'zh_tw',
  hr: 'hr',
  cs: 'cs',
  da: 'da',
  nl_be: 'nl_be',
  nl: 'nl',
  en: 'en',
  en_au: 'en_au',
  en_bz: 'en_bz',
  en_ca: 'en_ca',
  en_ie: 'en_ie',
  en_jm: 'en_jm',
  en_nz: 'en_nz',
  en_za: 'en_za',
  en_tt: 'en_tt',
  en_gb: 'en_gb',
  en_us: 'en_us',
  et: 'et',
  fo: 'fo',
  fa: 'fa',
  fi: 'fi',
  fr_be: 'fr_be',
  fr_ca: 'fr_ca',
  fr_lu: 'fr_lu',
  fr: 'fr',
  fr_ch: 'fr_ch',
  gd: 'gd',
  de_at: 'de_at',
  de_li: 'de_li',
  de_lu: 'de_lu',
  de: 'de',
  de_ch: 'de_ch',
  el: 'el',
  he: 'he',
  hi: 'hi',
  hu: 'hu',
  is: 'is',
  id: 'id',
  ga: 'ga',
  it: 'it',
  it_ch: 'it_ch',
  ja: 'ja',
  ko: 'ko',
  ku: 'ku',
  lv: 'lv',
  lt: 'lt',
  mk: 'mk',
  ml: 'ml',
  ms: 'ms',
  mt: 'mt',
  no: 'no',
  nb: 'nb',
  nn: 'nn',
  pl: 'pl',
  pt_br: 'pt_br',
  pt: 'pt',
  pa: 'pa',
  rm: 'rm',
  ro: 'ro',
  ro_md: 'ro_md',
  ru: 'ru',
  ru_md: 'ru_md',
  sr: 'sr',
  sk: 'sk',
  sl: 'sl',
  sb: 'sb',
  es_ar: 'es_ar',
  es_bo: 'es_bo',
  es_cl: 'es_cl',
  es_co: 'es_co',
  es_cr: 'es_cr',
  es_do: 'es_do',
  es_ec: 'es_ec',
  es_sv: 'es_sv',
  es_gt: 'es_gt',
  es_hn: 'es_hn',
  es_mx: 'es_mx',
  es: 'es',
  sv: 'sv',
  sv_fi: 'sv_fi',
  th: 'th',
  tr: 'tr',
  uk: 'uk',
  ur: 'ur',
  vi: 'vi',
  cy: 'cy',
  ji: 'ji',
  zu: 'zu'
};

exports.FileUploadStatus = exports.$Enums.FileUploadStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed'
};

exports.OrderFulfilmentMethod = exports.$Enums.OrderFulfilmentMethod = {
  delivery: 'delivery',
  pickup: 'pickup'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  card: 'card',
  blik: 'blik',
  paypal: 'paypal',
  bank_transfer: 'bank_transfer',
  cash_on_delivery: 'cash_on_delivery'
};

exports.PaymentProvider = exports.$Enums.PaymentProvider = {
  stripe: 'stripe',
  revolut: 'revolut',
  payu: 'payu',
  not_applicable: 'not_applicable'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  succeeded: 'succeeded',
  refunded: 'refunded',
  failed: 'failed',
  canceled: 'canceled'
};

exports.CampaignType = exports.$Enums.CampaignType = {
  discount: 'discount',
  promotion: 'promotion'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Member: 'Member',
  Invitation: 'Invitation',
  Organization: 'Organization',
  OpeningTimes: 'OpeningTimes',
  ClosingTimes: 'ClosingTimes',
  OrganizationConfiguration: 'OrganizationConfiguration',
  Address: 'Address',
  LegalEntity: 'LegalEntity',
  File: 'File',
  Manufacturer: 'Manufacturer',
  ManufacturerTranslation: 'ManufacturerTranslation',
  ProductCategory: 'ProductCategory',
  ProductCategoryTranslation: 'ProductCategoryTranslation',
  Product: 'Product',
  ProductSnapshot: 'ProductSnapshot',
  ProductTranslation: 'ProductTranslation',
  ModifierGroup: 'ModifierGroup',
  ModifierGroupTranslation: 'ModifierGroupTranslation',
  Modifier: 'Modifier',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderItemTranslation: 'OrderItemTranslation',
  Payment: 'Payment',
  PaymentSession: 'PaymentSession',
  Campaign: 'Campaign',
  ShippingMethod: 'ShippingMethod',
  ShippingZone: 'ShippingZone',
  Reservation: 'Reservation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
